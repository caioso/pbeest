; Project Beest
; Input Handler
; Developed by Caio Souza Oliveira
; 7 Aug 2019

; key event constants
key_a equ $01
key_b equ $02
key_select equ $04
key_start equ $08

key_right equ $10
key_left equ $20
key_up equ $40
key_down equ $80

; read current key input. Stores current key in in current_key.
; PK = Previous Key State
; CK = Current Key State
; (Key Up)   KU = ~(PK).(CK)
; (Key Down) KD= ~(KU).(PK).~(CK)
joypad:
    ; save current bc
    push bc

    ; read d-pad state
    ld a, %00100000
    ld [rP1], a

    ; debounnce 
    ld a, [rP1]
    ld a, [rP1]
    ld a, [rP1]
    ld a, [rP1]
    ld a, [rP1]

    ; clear reading
    and a, $0F
    swap a
    ld b, a

    ; read buttons state
    ld a, %00010000
    ld [rP1], a

    ; debounnce 
    ld a, [rP1]
    ld a, [rP1]
    ld a, [rP1]
    ld a, [rP1]
    ld a, [rP1]

    ; clear reading and combine with d-pad reading
    and $0F
    or b

    ; apply complement
    cpl
    ; A -> Key Up
    ; B -> Current key state
    ; C -> Previous frame key state
    ; save current key
    ; ~A.B.C
    ld b, a

    ; Calculate Key Down State
    ld a,  [current_key_up]
    cpl
    ld c, a
    ld a, b
    and c
    ld c, a
    ld a, [current_key]
    cpl
    and c
    ld [current_key_down], a

    ; Calculate Key Up State
    ; A -> Previous frame key state
    ; B -> Current key state
    ; save current key
    ; A.~B
    ld a, b
    cpl 
    ld c, a
    ld a, [current_key]
    and c
    ld [current_key_up], a

    ld a, b
    ; calculate current key down
    ld [current_key], a

    ; restore bc
    pop bc
    ret

; checks whether a specific key is down
; l: keycode
; return (l): 1 true, 0 false
is_key_down:
    ld a, [current_key_down]
    and a, l
    jr z, .not_detected
    ld a, $01
    ret
.not_detected:
    ld a, $00
    ret

; checks whether a specific key is held
; l: keycode
; return (l): 1 true, 0 false
is_key_held:
    ld a, [current_key]
    and a, l
    jr z, .not_detected
    ld a, $01
    ret
.not_detected:
    ld a, $00
    ret


; checks whether a specific key is held or down
; l: keycode
; return (l): 1 true, 0 false
is_key_down_or_held:
    push hl
    ld a, [current_key]
    ld l, a
    ld a, [current_key_down]
    or l
    ld a, l
    pop hl
    and a, l
    jr z, .not_detected
    ld a, $01
    ret
.not_detected:
    ld a, $00
    ret

; checks whether a specific key is up
; l: keycode
; return (l): 1 true, 0 false
is_key_up:
    ld a, [current_key_up]
    and a, l
    jr z, .not_detected
    ld a, $01
    ret
.not_detected:
    ld a, $00
    ret

; Checks whether any key in the DPAD has been pressed (any key).
; return a: 0 not pressed, 1 pressed
joypad_is_dpad_pressed:
    ld a, [current_key]
    and $F0
    jr z, .not_pressed
        ld a, $01
        ret
.not_pressed:
    ld a, $00
    ret


; Initialize Joypad Variables
joypad_initialize:
    ld a, $00
    ld [current_key_up], a
    ld [current_key_down],a 
    ld [current_key], a
    ret