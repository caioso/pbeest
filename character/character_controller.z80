; Project Beest
; Character Controller -> Character are assumed to always be 16x16 (4 tiles)
; Developed by Caio Souza Oliveira
; 17 Aug 2019

; load character tiles
chr_load_character_tiles_and_palettes:
    ; load sprite tiles
    ; initialize hero tiles
    ld hl, hero_begin
    ld bc, hero_end - hero_begin
    ld a, $00
    ; load hero tukes
    call tilecrt_load_tiles

    ; load sprite palletes
    ld hl, hero_palette_begin
    ld de, hero_palette_end - hero_palette_begin
    ld bc, 0 ; target palette index (each palette has 4 colors)
    call sprt_load_sprite_palette

    ret


; Initialize character variables
; hl: character variable address
; bc: character position (c:X, b:Y)
; a: character tile (all 4 tiles *MUST* be in sequence)
; return: no return
chr_initialize_character:
    ; update character variable
    push hl
    ld [hl], c
    inc hl
    ld [hl], b
    inc hl
    ld [hl], a
    pop hl
    ld e, l
    ld d, h
    push de

    ; get sprite number
    call sptr_get_sprite_number_by_character_id
    push bc
    ld c, l
    ld b, h
    ; Intialize Hero Sprite
    ; X
    ld a, [de]
    ld h, a
    inc de
    ; Y
    ld a, [de]
    ld l, a
    inc de
    ; Sprite
    ld a, [de]
    ld d, a
    ; Metadata
    ld e, $00
    call sptr_initialize_sprite

    pop bc
    pop de
    ld bc, sprite_2
    ; X (+ 8)
    ld a, [de]
    add $08
    ld h, a 
    inc de
    ; Y
    ld a, [de]
    ld l, a
    inc de
    ; Sprite (+ 2), assumed always to be in sequence
    ld a, [de]
    add $02  
    ld d, a
    ; Metadata
    ld e, $00
    call sptr_initialize_sprite

    ret

; Move Character Down
; hl: character variable address
chr_move_character_down:
    push hl
    ; generate address of character Y
    inc hl

    ; load current Y, move it down and store it back
    ld a, [hl]
    inc a
    ld [hl], a
    pop hl

    ; get sprite number for the target character (stored in hl)
    ; save a (holds final Y position)
    ld e, a
    push de
    call sptr_get_sprite_number_by_character_id
    pop de
    ld a, e

    ; target sprite left and right (16x8 times 2) Y coordinate
    ; hl holds address of the first sprite of the target character
    call sptr_set_sprite_y

    ; load address of second sprite from bc to hl
    ld l, c
    ld h, b
    call sptr_set_sprite_y
    ret

; Move Character Down
; hl: character variable address
chr_move_character_up:
    push hl
    ; generate address of character Y
    inc hl

    ; load current Y, move it down and store it back
    ld a, [hl]
    dec a
    ld [hl], a
    pop hl

    ; get sprite number for the target character (stored in hl)
    ; save a (holds final Y position)
    ld e, a
    push de
    call sptr_get_sprite_number_by_character_id
    pop de
    ld a, e

    ; target sprite left and right (16x8 times 2) Y coordinate
    ; hl holds address of the first sprite of the target character
    call sptr_set_sprite_y

    ; load address of second sprite from bc to hl
    ld l, c
    ld h, b
    call sptr_set_sprite_y
    ret

; Move Character Left
; hl: character variable address
chr_move_character_left:
    push hl

    ; load current X, move it down and store it back
    ld a, [hl]
    dec a
    ld [hl], a
    pop hl

    ; get sprite number for the target character (stored in hl)
    ; save a (holds final X position)
    ld e, a
    push de
    call sptr_get_sprite_number_by_character_id
    pop de
    ld a, e

    ; target sprite left and right (16x8 times 2) X coordinate
    ; hl holds address of the first sprite of the target character
    call sptr_set_sprite_x

    ; load address of second sprite from bc to hl
    add a, $08
    ld l, c
    ld h, b
    call sptr_set_sprite_x
    ret

; Move Character Right
; hl: character variable address
chr_move_character_right:
    push hl

    ; load current X, move it down and store it back
    ld a, [hl]
    inc a
    ld [hl], a
    pop hl

    ; get sprite number for the target character (stored in hl)
    ; save a (holds final X position)
    ld e, a
    push de
    call sptr_get_sprite_number_by_character_id
    pop de
    ld a, e

    ; target sprite left and right (16x8 times 2) X coordinate
    ; hl holds address of the first sprite of the target character
    call sptr_set_sprite_x

    ; load address of second sprite from bc to hl
    add a, $08
    ld l, c
    ld h, b
    call sptr_set_sprite_x
    ret

; Character control loop iteration
; Reads input and handles movement and interactions
chr_player_controlled_character_loop:

    ; read key for directiona movement
    ld l, key_down
    call is_key_down
    jr z, .check_key_up
        ; Move Character Down
        ld hl, character_0
        call chr_move_character_down
        jr .check_key_left

.check_key_up:
    ld l, key_up
    call is_key_down
    jr z, .check_key_left
        ; Move Character Up
        ld hl, character_0
        call chr_move_character_up
    
.check_key_left:
    ld l, key_left
    call is_key_down
    jr z, .check_key_right
        ; Move Character Up
        ld hl, character_0
        call chr_move_character_left
        jr .end_character_movement

.check_key_right:
    ld l, key_right
    call is_key_down
    jr z, .end_character_movement
        ; Move Character Up
        ld hl, character_0
        call chr_move_character_right

.end_character_movement:
    ret