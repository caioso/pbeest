; Project Beest
; Character Controller -> Character are assumed to always be 16x16 (4 tiles)
; Developed by Caio Souza Oliveira
; 17 Aug 2019

; constant
chr_top_edge_limit equ $06
chr_bottom_edge_limit equ $90
chr_left_edge_limit equ $FF
chr_right_edge_limit equ $A0


; load character tiles
chr_load_character_tiles_and_palettes:
    ; load sprite tiles
    ; initialize hero tiles
    ld hl, hero_begin
    ld bc, hero_end - hero_begin
    ld a, $00
    ; automatic tile placement in memory (incremental)
    ld de, automatic_tile_placement
    ; load hero tukes
    call tilecrt_load_tiles

    ; load sprite palletes
    ld hl, hero_palette_begin
    ld de, hero_palette_end - hero_palette_begin
    ld bc, 0 ; target palette index (each palette has 4 colors)
    call sprt_load_sprite_palette

    ret


; Initialize character variables
; de: game object position (d: X, e: Y)
; c: target game object sprite
; b: attribute
; return: no return
chr_initialize_character:
    ; get player character ID
    call goc_find_game_object_table_slot
    ld [ram_player_character_id], a

    ld a, $00
    ld [map_real_x], a
    ld [map_real_y], a
    ld a, [ram_player_character_id]
    ; from this point onwards, h Holds the address of the slot in the table
    call goc_initialize_game_object
    
    ret

; Normalize Screen Coordinates
; b: character X (top-left)
; c: character Y (top-left)
; return (bc): normalized coordinates
chr_normalize_coordinates:
    ld a, b
    sub a, $08
    ld b, a
    ld a, c
    sub a, $10
    ld c, a
    ret

; Convert real player character position into bounding box origin
; b: character X (top-left)
; c: character Y (top-left)
; return (bc): converted coordinates.
chr_calculate_bounding_box_origin:
    ld a, b
    add a, $03
    ld b, a
    ld a, c
    add a, $07
    ld c, a
    ret

; Convert map position in pixels into map tiles
; a: position in pixels
; return: position in tiles
chr_pixel_to_tile:
    srl a
    srl a
    srl a
    ret

; Move Character Down
chr_move_character_down:
    ; intiialize variable
    call ram_get_player_game_obj_address

    ; Point HL to the character Y position in the character struct.
    ; BC holds the position (b:X; c:Y) of the player character *IN PIXELS*
    ld a, [hl]
    ld c, a
    inc hl
    ld a, [hl]
    ld b, a
    
    ; Normalize coordinates
    call chr_normalize_coordinates

    ; Calculate Bounding box
    ; From this point onwards, the value held by bc is the coordinate of the top-left corner of the bounding box.
    ; Conventions -> BBx = Px + 3
    ;                BBy = Py + 7
    call chr_calculate_bounding_box_origin

    ; save position for later calculation
    ld a, [character_0_offset_x]
    add b
    ld b, a
    ld [ram_general_use_variable_4], a
    ld a, [character_0_offset_y]
    add c
    ld c, a
    ld [ram_general_use_variable_5], a

    ; check collision
    push bc
    push hl

    ; add movement direction (Y + 9)
    ld a, c
    add $09
    ld c, a

    ; check game_object collision for z-index adjustments (may have other uses in the future)
    push de
    push bc
    push hl
    ld e, 1
    ld d, 0
    call goc_detect_collision_width_game_objects_full_obj
    pop hl
    pop bc
    pop de

    ; check game_object collision
    push de
    push bc
    push hl
    ld e, 1
    ld d, 0
    call goc_detect_collision_width_game_objects
    pop hl
    pop bc
    pop de

    cp a, $01
    jr nz, .skip
        pop hl
        pop bc
        ret
.skip:
    ; check vertical collision
    ld a, $09
    call chr_check_vertical_edges
    cp $00
    jr nz, .continue_collision_check
        ld a, [map_current_y_offset]
        ld b, a
        ld a, c
        sub b
        ld [edget_collision_target_y], a
        pop hl
        pop bc
        ret

.continue_collision_check:
    ; Convert bounding_box coordinate into screen tile coordinates
    ; PXL(X) -> TILE(X)
    ld a, b
    call chr_pixel_to_tile
    ld b, a
    ; PXL(Y) -> TILE(Y)
    ld a, c
    call chr_pixel_to_tile
    ld c, a

    ; Check Whether the tiles below the bounding box are crossable.
    ld d, b
    ld e, c
    push de
    call chr_check_vertical_movement
    pop de
    pop hl
    pop bc

    ; if a is 1, movement is already not allowed. Skip
    cp $00
    jr nz, .auto_move

    ; Scroll map if requied
    ld a, $00
    call map_scroll_map_vertically_if_needed
    
    ; The background has scrolled, hence no character movement allowed (in the middle of vertical axis)
    cp $01
    ret z

    ; load current Y, move it down and store it back
    call ram_get_player_game_obj_address
    ld a, [hl]
    inc a
    ld [hl], a

    ; Move second sprite
    call ram_get_player_game_obj_address
    call ram_get_sprite_second_half
    ld a, [hl]
    inc a
    ld [hl], a

    ret

.auto_move:

    ; Reload original character position
    call ram_get_player_game_obj_address

    cp $03 ; 03 means both tiles triggered the colission
    ret z

    cp $01 ; 01 means the first tile only triggered the collision 
   
    jr nz, .move_left
        ld a, [ram_general_use_variable_4]
        and $07
        ; if the bounding box is at least 3 pixels touching the target collision, it wil trigger auto movemnt
        sub $04
        ret c

        call chr_move_character_right
        ret
        
; to assist movement, the chacarcter may be moved automatically to the left
.move_left:
    cp $04
        jr z, .three_tile_case_offset_compensation
        ld a, [ram_general_use_variable_4]
        and $07
        ; if the bounding box is at least 3 pixels touching the target collision, it wil trigger auto movemnt
        sub $03
        ret nc
        jr .move_left_confirmed

.three_tile_case_offset_compensation:
    ld a, [ram_general_use_variable_4]
    and $07
    cp $07
    ret nz

.move_left_confirmed:
    call chr_move_character_left
    ret 

; Move Character Up
chr_move_character_up:
    ; load character address
    call ram_get_player_game_obj_address

    ; Point HL to the character Y position in the character struct.
    ; BC holds the position (b:X; c:Y) of the player character *IN PIXELS*
    ld a, [hl]
    ld c, a
    inc hl
    ld a, [hl]
    ld b, a
    
    ; Normalize coordinates
    call chr_normalize_coordinates

    ; Calculate Bounding box
    ; From this point onwards, the value held by bc is the coordinate of the top-left corner of the bounding box.
    ; Conventions -> BBx = Px + 3
    ;                BBy = Py + 7
    call chr_calculate_bounding_box_origin

    ; save position for later calculation
    ld a, [character_0_offset_x]
    add b
    ld b, a
    ld [ram_general_use_variable_4], a
    ld a, [character_0_offset_y]
    add c
    ld c, a
    ld [ram_general_use_variable_5], a

    ; check collision
    push bc
    push hl

    ; add movement direction (Y - 1)
    ld a, c
    sub $01
    ld c, a

    ; check game_object collision for z-index adjustments (may have other uses in the future)
    push de
    push bc
    push hl
    ld e, -1
    ld d, 0
    call goc_detect_collision_width_game_objects_full_obj
    pop hl
    pop bc
    pop de

    ; check game_object collision
    push de
    push bc
    push hl
    ld e, -1
    ld d, 0
    call goc_detect_collision_width_game_objects
    pop hl
    pop bc
    pop de

    cp a, $01
    jr nz, .skip
        pop hl
        pop bc
        ret

.skip:
    ; check vertical collision
    ld a, -$01
    call chr_check_vertical_edges
    cp $00
    jr nz, .continue_collision_check
        ld a, [map_current_y_offset]
        ld b, a
        ld a, c
        sub b
        ld [edget_collision_target_y], a
        pop hl
        pop bc
        ret

.continue_collision_check:
    ; Convert bounding_box coordinate into screen tile coordinates
    ; PXL(X) -> TILE(X)
    ld a, b
    call chr_pixel_to_tile
    ld b, a
    ; PXL(Y) -> TILE(Y)
    ld a, c
    call chr_pixel_to_tile
    ld c, a

    ; Check Whether the tiles above the bounding box are crossable.
    ld d, b
    ld e, c
    push de
    call chr_check_vertical_movement
    pop de
    pop hl
    pop bc

    ; if a is 1, movement is already not allowed. Skip
    cp $00
    jr nz, .auto_move

    ; Scroll map if requied
    ld a, $01
    call map_scroll_map_vertically_if_needed
    
    ; The background has scrolled, hence no character movement allowed (in the middle of vertical axis)
    cp $01
    ret z

    ; load current Y, move it down and store it back
    call ram_get_player_game_obj_address
    ld a, [hl]
    dec a
    ld [hl], a

    ; Update seconds sprite
    call ram_get_player_game_obj_address
    call ram_get_sprite_second_half
    ld a, [hl]
    dec a
    ld [hl], a

    ret

.auto_move:
    ; reload charcater address
    call ram_get_player_game_obj_address

    cp $03 ; 03 means both tiles triggered the colission
    ret z

    cp $01 ; 01 means the first tile only triggered the collision 
   
    jr nz, .move_left
        ld a, [ram_general_use_variable_4]
        and $07
        ; if the bounding box is at least 3 pixels touching the target collision, it wil trigger auto movemnt
        sub $04
        ret c

        call chr_move_character_right
        ret
        
; to assist movement, the chacarcter may be moved automatically to the left
.move_left:
    cp $04
        jr z, .three_tile_case_offset_compensation
        ld a, [ram_general_use_variable_4]
        and $07
        ; if the bounding box is at least 3 pixels touching the target collision, it wil trigger auto movemnt
        sub $03
        ret nc
        jr .move_left_confirmed

.three_tile_case_offset_compensation:
    ld a, [ram_general_use_variable_4]
    and $07
    cp $07
    ret nz

.move_left_confirmed:
    call chr_move_character_left
    ret

; Move Character Left
chr_move_character_left:
    ; load character address
    call ram_get_player_game_obj_address

    ; Point HL to the character Y position in the character struct.
    ; BC holds the position (b:X; c:Y) of the player character *IN PIXELS*
    ld a, [hl]
    ld c, a
    inc hl
    ld a, [hl]
    ld b, a
    
    ; Normalize coordinates
    call chr_normalize_coordinates

    ; Calculate Bounding box
    ; From this point onwards, the value held by bc is the coordinate of the top-left corner of the bounding box.
    ; Conventions -> BBx = Px + 3
    ;                BBy = Py + 7
    call chr_calculate_bounding_box_origin

    ; save position for later calculation
    ld a, [character_0_offset_x]
    add b
    ld b, a
    ld [ram_general_use_variable_4], a
    ld a, [character_0_offset_y]
    add c
    ld c, a
    ld [ram_general_use_variable_5], a

    ; check collision
    push bc
    push hl

    ; add movement direction (Y - 1)
    ld a, b
    sub $01
    ld b, a

    ; check game_object collision
    push de
    push bc
    push hl
    ld e, 0
    ld d, -1
    call goc_detect_collision_width_game_objects_full_obj
    pop hl
    pop bc
    pop de

    ; check game_object collision
    push de
    push bc
    push hl
    ld e, 0
    ld d, -1
    call goc_detect_collision_width_game_objects
    pop hl
    pop bc
    pop de

    cp a, $01
    jr nz, .skip
        pop hl
        pop bc
        ret
.skip:

    ; check horizontal collision
    ld a, -$01
    call chr_check_horizontal_edges
    cp $00
    jr nz, .continue_collision_check
        ld a, [map_current_x_offset]
        ld c, a
        ld a, b
        sub c
        ld [edget_collision_target_x], a
        pop hl
        pop bc
        ret

.continue_collision_check:
    ; Convert bounding_box coordinate into screen tile coordinates
    ; PXL(X) -> TILE(X)
    ld a, b
    call chr_pixel_to_tile
    ld b, a
    ; PXL(Y) -> TILE(Y)
    ld a, c
    call chr_pixel_to_tile
    ld c, a

    ; Check Whether the tiles below the bounding box are crossable.
    ld d, b
    ld e, c
    push de
    call chr_check_horizontal_movement
    pop de
    pop hl
    pop bc

    ; if a is 1, movement is already not allowed. Skip
    cp $00
    jr nz, .auto_move

        ; Scroll map if requied
        ld a, $01
        call map_scroll_map_horizontally_if_needed
        ; The background has scrolled, hence no character movement allowed (in the middle of vertical axis)
        cp $01
        ret z

        ; load current X, move it down and store it back
        call ram_get_player_game_obj_address
        inc hl
        ld a, [hl]
        dec a
        ld [hl], a
        
        ; Update second sprite
        call ram_get_player_game_obj_address
        call ram_get_sprite_second_half
        inc hl
        ld a, [hl]
        dec a
        ld [hl], a

        ret

.auto_move
    
    ; reload character address
    call ram_get_player_game_obj_address

    cp $03 ; 03 means both tiles triggered the colission
    ret z

    cp $01 ; 01 means the first tile only triggered the collision 
   
    jr nz, .move_up
        ld a, [ram_general_use_variable_5]
        and $07
        ; if the bounding box is at least 3 pixels touching the target collision, it wil trigger auto movemnt
        sub $04
        ret c

        call chr_move_character_down
        ret
        
; to assist movement, the chacarcter may be moved automatically up
.move_up:
        ld a, [ram_general_use_variable_5]
        and $07
        ; if the bounding box is at least 3 pixels touching the target collision, it wil trigger auto movemnt
        sub $04
        ret nc
        jr .move_up_confirmed

.move_up_confirmed:
    call chr_move_character_up
    ret

; Move Character Right
chr_move_character_right:
    ; Load Character address
    call ram_get_player_game_obj_address

    ; Point HL to the character Y position in the character struct.
    ; BC holds the position (b:X; c:Y) of the player character *IN PIXELS*
    ld a, [hl]
    ld c, a
    inc hl
    ld a, [hl]
    ld b, a
    
    ; Normalize coordinates
    call chr_normalize_coordinates

    ; Calculate Bounding box
    ; From this point onwards, the value held by bc is the coordinate of the top-left corner of the bounding box.
    ; Conventions -> BBx = Px + 3
    ;                BBy = Py + 7
    call chr_calculate_bounding_box_origin

    ; save position for later calculation
    ld a, [character_0_offset_x]
    add b
    ld b, a
    ld [ram_general_use_variable_4], a
    ld a, [character_0_offset_y]
    add c
    ld c, a
    ld [ram_general_use_variable_5], a

    ; check collision
    push bc
    push hl

    ; add movement direction (X + 1)
    ld a, b
    add $0A
    ld b, a

    ; check game_object collision
    push de
    push bc
    push hl
    ld e, 0
    ld d, 1
    call goc_detect_collision_width_game_objects_full_obj
    pop hl
    pop bc
    pop de

    ; check game_object collision
    push de
    push bc
    push hl
    ld e, 0
    ld d, 1
    call goc_detect_collision_width_game_objects
    pop hl
    pop bc
    pop de

    cp a, $01
    jr nz, .skip
        pop hl
        pop bc
        ret
.skip:

    ; check horizontal collision
    ld a, $0A
    call chr_check_horizontal_edges
    cp $00
    jr nz, .continue_collision_check
        ld a, [map_current_x_offset]
        ld c, a
        ld a, b
        sub c
        ld [edget_collision_target_x], a
        pop hl
        pop bc
        ret

.continue_collision_check:

    ; Convert bounding_box coordinate into screen tile coordinates
    ; PXL(X) -> TILE(X)
    ld a, b
    call chr_pixel_to_tile
    ld b, a
    ; PXL(Y) -> TILE(Y)
    ld a, c
    call chr_pixel_to_tile
    ld c, a

    ; Check Whether the tiles below the bounding box are crossable.
    ld d, b
    ld e, c
    push de
    call chr_check_horizontal_movement
    pop de
    pop hl
    pop bc

    ; if a is 1, movement is already not allowed. Skip
    cp $00
    jr nz, .auto_move

        ; Scroll map if requied
        ld a, $00
        call map_scroll_map_horizontally_if_needed
        ; The background has scrolled, hence no character movement allowed (in the middle of vertical axis)
        cp $01
        ret z
        
        ; load current X, move it down and store it back
        call ram_get_player_game_obj_address
        inc hl
        ld a, [hl]
        inc a
        ld [hl], a

        ; Handle second sprite
        call ram_get_player_game_obj_address
        call ram_get_sprite_second_half
        inc hl
        ld a, [hl]
        inc a
        ld [hl], a

        ret

.auto_move
    
    ; Reload character address
    call ram_get_player_game_obj_address

    cp $03 ; 03 means both tiles triggered the colission
    ret z

    cp $01 ; 01 means the first tile only triggered the collision 
   
    jr nz, .move_up
        ld a, [ram_general_use_variable_5]
        and $07
        ; if the bounding box is at least 3 pixels touching the target collision, it wil trigger auto movemnt
        sub $04
        ret c

        call chr_move_character_down
        ret
        
; to assist movement, the chacarcter may be moved automatically up
.move_up:
        ld a, [ram_general_use_variable_5]
        and $07
        ; if the bounding box is at least 3 pixels touching the target collision, it wil trigger auto movemnt
        sub $04
        ret nc
        jr .move_up_confirmed

.move_up_confirmed:
    call chr_move_character_up
    ret

; Extract ID of colliding object
; bc: colliding tile
; modified: a, hl
chr_get_collision_id:
    push hl
    ld a, [bc]
    ld hl, collision_target
    ; clear the MSBit and provide the 7 bits map ID
    and a, $7F
    ld [hl], a
    pop hl
    ret

; Increment next line to the current value of DE
; de: current base address
chr_inc_next_line:
    push hl
    ld a, map_screen_width
    add a, e
    ld e, a
    ld a, d
    adc $00
    ld d, a
    pop hl
    ret

; clear collision targets
chr_clear_collision:
    ld a, $00
    ld [collision_target], a
    ld a, $FE
    ld [edget_collision_target_x], a
    ld [edget_collision_target_y], a
    ret

; Character control loop iteration
; Reads input and handles movement and interactions
chr_player_controlled_character_loop:
    ; This algorithm clears the "collision target" every time a directional key is detected.
    ; Thats because the movement may or may not lead to a collision (the player can face away from a target object, or face another object).
    call joypad_is_dpad_pressed
    cp a, $01
    jr nz, .continue_movement_processing
        ; clear colision targets
        ld a, $00
        ld [collision_target], a
        ld a, $FE
        ld [edget_collision_target_x], a
        ld [edget_collision_target_y], a

.continue_movement_processing:
    ; read key for directiona movement
    ld l, key_down
    call is_key_down_or_held
    jr z, .check_key_up
        ; Move Character Down
        call chr_move_character_down
        jr .check_key_left

.check_key_up:
    ld l, key_up
    call is_key_down_or_held
    jr z, .check_key_left
        ; Move Character Up
        call chr_move_character_up
    
.check_key_left:
    ld l, key_left
    call is_key_down_or_held
    jr z, .check_key_right
        ; Move Character Up
        call chr_move_character_left
        jr .end_character_movement

.check_key_right:
    ld l, key_right
    call is_key_down_or_held
    jr z, .end_character_movement
        ; Move Character Up
        call chr_move_character_right

.end_character_movement:
    ret

; Check Vertical Edges
; a: movement direction increment
; return a: 1 allowed, 0 not allowed
chr_check_vertical_edges:
    push bc
    push de
    push hl
    ld l, a
    push hl
    call ram_get_player_game_obj_address
    ld a, [hl]
    ld c, a
    pop hl
    push hl
    call ram_get_player_game_obj_address
    inc hl
    ld a, [hl]
    pop hl
    ld b, a
    call chr_normalize_coordinates
    call chr_calculate_bounding_box_origin
    ld a, c
    add l
    ld c, a
    pop hl

    ld a, c
    cp chr_bottom_edge_limit
    jr z, .not_allowed
    cp chr_top_edge_limit
    jr z, .not_allowed
        ld a, collision_type_edge
        ld [collision_target_type], a
        ld a, $01
        pop de
        pop bc
        ret
.not_allowed:
    ld a, collision_type_edge
    ld [collision_target_type], a
    ld a, $00
    pop de
    pop bc
    ret

; Check Horizontal Edges
; de: b[x], c[y] character position (in pixels)
; return a: 1 allowed, 0 not allowed
chr_check_horizontal_edges:
    push bc
    push de
    push hl
    ld l, a
    push hl
    call ram_get_player_game_obj_address
    ld a, [hl]
    ld c, a
    pop hl
    push hl
    call ram_get_player_game_obj_address
    inc hl
    ld a, [hl]
    pop hl
    ld b, a
    call chr_normalize_coordinates
    call chr_calculate_bounding_box_origin
    ld a, b
    add l
    ld b, a
    pop hl
    
    ld a, b
    cp chr_left_edge_limit
    jr z, .not_allowed
    cp chr_right_edge_limit
    jr z, .not_allowed
        ld a, collision_type_edge
        ld [collision_target_type], a
        ld a, $01
        pop de
        pop bc
        ret
.not_allowed:
    ld a, collision_type_edge
    ld [collision_target_type], a
    ld a, $00
    pop de
    pop bc
    ret

; checks whether movement is alowed (vertical direction)
; de: d[x], e[y] character position (in tiles)
; return a: 1/2/3 allowed (1 tile to the right caused collision, 2, tile to the left caused collision, 
; 3 both caused the collision, 4 teh third tile below the player triggered the collision), 0 allowed
chr_check_vertical_movement:
    ld a, map_max_width
    ld l, a
    ld h, $00

    push de
    ld d, $00
    call mul_DE_HL_BCDEu
    ld c, e
    ld b, d
    pop de
    ld a, d
    add a, c
    ld c, a
    ld a, b
    adc $00
    ld b, a

    ; calculate address in logic map
    ld de, map_logic
    ld a, c
    add e
    ld c, a
    ld a, b
    adc d
    ld b, a

    ; Check MSBit of the target map entry
    push bc
    ; load d with 00 (no collisiton target)
    ; work your way down to check bits 0 and 1 representing collisions in tile left/right respectivelly.
    ld d, $00
    ld a, [bc]
    and a, $80
    jr z, .check_second_tile
        ld a, collision_type_map
        ld [collision_target_type], a
        ; the target tile is not crossable
        ld a, d
        or $01
        ld d, a
        call chr_get_collision_id

.check_second_tile:
    ; check tile to the right
    inc bc
    ; check the case where the bounding box spans 3 pixels!!!!!!
    ld a, [bc]
    and a, $80
    jr z, .check_third_tile
        ld a, collision_type_map
        ld [collision_target_type], a
        ; the target tile is not crossable
        ld a, d
        or $02
        ld d, a
        call chr_get_collision_id
        pop bc

        ; prepare return
        ld a, d
        ret

.check_third_tile:
    ld a, [ram_general_use_variable_4]
    and $07
    cp $07
    jr nz, .finalize
        inc bc
        ld a, [bc]
        and a, $80
        jr z, .finalize
            ld a, collision_type_map
            ld [collision_target_type], a
            ; the target tile is not crossable
            ld a, d
            or $04
            ld d, a
            call chr_get_collision_id
            pop bc

            ; prepare return
            ld a, d
            ret

.finalize:
        pop bc
        ld a, d
        ret

; checks whether movement is alowed (horizontal direction)
; de: d[x], e[y] character position (in tiles)
; return a: 1/2/3 allowed (1 tile to the right caused collision, 2, tile to the left caused collision, 3 both caused the collision), 0 allowed
chr_check_horizontal_movement:
    ld a, map_max_width
    ld l, a
    ld h, $00

    push de
    ld d, $00
    call mul_DE_HL_BCDEu
    ld c, e
    ld b, d
    pop de
    ld a, d
    add a, c
    ld c, a
    ld a, b
    adc $00
    ld b, a

    ; calculate address in logic map
    ld de, map_logic
    ld a, c
    add e
    ld c, a
    ld a, b
    adc d
    ld b, a

    ; Check MSBit of the target map entry
    push bc
    ; load d with 00 (no collisiton target)
    ; work your way down to check bits 0 and 1 representing collisions in tile left/right respectivelly.
    ld d, $00
    ld a, [bc]
    and a, $80
    jr z, .check_second_tile
        ld a, collision_type_map
        ld [collision_target_type], a
        ; the target tile is not crossable
        ld a, d
        or $01
        ld d, a
        call chr_get_collision_id

.check_second_tile:
    ; check tile to the below (subtract screen width from the current logic LUT address)
    ld a, map_max_width
    add a, c
    ld c, a
    ld a, b
    adc $00
    ld b, a

    ; check the case where the bounding box spans 3 pixels!!!!!!
    ld a, [bc]
    and a, $80
    jr z, .finalize
        ld a, collision_type_map
        ld [collision_target_type], a
        ; the target tile is not crossable
        ld a, d
        or $02
        ld d, a
        call chr_get_collision_id
        pop bc

        ; prepare return
        ld a, d
        ret

.finalize:
        pop bc
        ld a, d
        ret