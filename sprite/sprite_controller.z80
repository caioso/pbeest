; Project Beest
; Sprite Control Routines
; Developed by Caio Souza Oliveira
; 16 Aug 2019

; Sprite Constants
sprite_y equ 0
sprite_x equ 1
sprite_tile equ 2
sprite_attr equ 3
sprite_size equ 4

; Sprite 1
sprite_1 equ _OAMRAM 
sprite_2 equ _OAMRAM + sprite_size

; initialize Sprite
; bc: sprite ID
; h: sprite X
; l: sprite Y
; d: sprite tile
; e: sprite attribute
; no returns
sptr_initialize_sprite:
    ; initialize sprite
    ld a, l
    ld [bc], a
    inc bc
    ld a, h
    ld [bc], a
    inc bc
    ld a, d
    ld [bc], a
    inc bc
    ld a, e
    ld [bc], a
    ret

; loads background palettes
; hl: holds address to first byte palette
; de: number of bytes to be loaded
; bc: holds palette index
sprt_load_sprite_palette:
    ld a, c
    ; multiplies index by 8, to target individual palettes by index, rather than colors.
    rla
    rla
    rla
    ld c, a
    ; set palette write mode (rOCPS)
    ; setting the MSBit of BCPS will increment allow writing to the palette registers with auto increment
    ; that after writing to BCPD, the lower 7 bits of BCPDS will be incremented
    ld a, $80
    or a, c
    ld [rOCPS], a
.load_palette_bytes:
    ld a, [hl]
    ld [rOCPD], a
    inc hl
    dec de
    ld a, e
    or d
    jr nz, .load_palette_bytes
    ret

; updates target sprite Y position
; hl: sprite address (_OAMRAM relative)
; a: target Y position
sptr_set_sprite_y:
    ; Y position is the first address
    ld [hl], a
    ret

; updates target sprite X position
; hl: sprite address (_OAMRAM relative)
; a: target X position
sptr_set_sprite_x:
    ; X position is the second address
    inc hl
    ld [hl], a
    ret

; Automatically moves all sprites to the left
; a: number of sprites
sptr_move_all_sprites_to_left:
    ld c, a
    ld hl, _OAMRAM
    ;inc hl
.move:
    ; move sprite
    ld a, [hl]
    dec a
    ld [hl], a

    inc hl
    inc hl
    inc hl
    inc hl

    dec c
    ld a, c
    cp $00
    jr nz, .move
    ret


; converts character number to real (dual) sprite number 
; hl: character numner
; return (hl): corresponding sprite number (character sprite 1)
; return (bc): corresponding sprite number (character sprite 2)
sptr_get_sprite_number_by_character_id:
    push hl
    ld a, c
    sub l
    ld l, a
    ld a, b
    sbc h
    or c
    jr z, .sprite_1
    jr .default_sprite
    
.sprite_1:
    pop hl
    ld hl, sprite_1
    ld bc, sprite_2
    ret

.default_sprite:
    pop hl
    ld hl, sprite_1
    ld bc, sprite_2
    ret
    