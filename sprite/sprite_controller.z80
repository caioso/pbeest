; Project Beest
; Sprite Control Routines
; Developed by Caio Souza Oliveira
; 16 Aug 2019

; Sprite Constants
sprite_y equ 0
sprite_x equ 1
sprite_tile equ 2
sprite_attr equ 3
sprite_size equ 4

; Sprite 1
sprite_1 equ _OAMRAM 
sprite_2 equ _OAMRAM + sprite_size
sprite_3 equ sprite_2 + sprite_size
sprite_4 equ sprite_3 + sprite_size
sprite_5 equ sprite_4 + sprite_size
sprite_6 equ sprite_5 + sprite_size

; Perform DMA call.
dma_copy:
    ld a, $DF
    ld [$FF46], a
    ld a, 40
.loop:
    dec a
    jr nz, .loop
    ret
dma_copy_end:
    nop


; Copy DMA routine to HRAM memory
sprt_copy_dma:
    ld bc, dma_copy
    ld hl, $FF80
    ; DMA routine is 13 bytes long
    ld de, dma_copy_end - dma_copy
.continue:
    ld a, [bc]
    inc bc
    ld [hl+], a
    dec e
    ld a, e
    cp $00
    jr nz, .continue
  ret

; Clear sprite Memory
sprt_clear_sprites:
    ; write 0's to the sprite memory
    ld hl, sprite_memory_begin
    ld c, sprite_memory_end -sprite_memory_begin
.continue:
    ld [hl], $00
    inc hl
    dec c
    ld a, $00
    or c
    jr nz, .continue
    ret

; initialize Sprite
; bc: sprite ID
; h: sprite X
; l: sprite Y
; d: sprite tile
; e: sprite attribute
; no returns
sptr_initialize_sprite:
    ; initialize sprite
    ld a, l
    ld [bc], a
    inc bc
    ld a, h
    ld [bc], a
    inc bc
    ld a, d
    ld [bc], a
    inc bc
    ld a, e
    ld [bc], a
    ret

; loads sprite palettes
; hl: holds address to first byte palette
; de: number of bytes to be loaded
; bc: holds palette index
sprt_load_sprite_palette:
    ld a, c
    ; multiplies index by 8, to target individual palettes by index, rather than colors.
    rla
    rla
    rla
    ld c, a
    ; set palette write mode (rOCPS)
    ; setting the MSBit of BCPS will increment allow writing to the palette registers with auto increment
    ; that after writing to BCPD, the lower 7 bits of BCPDS will be incremented
    ld a, $80
    or a, c
    ld [rOCPS], a
.load_palette_bytes:
    ld a, [hl]
    ld [rOCPD], a
    inc hl
    dec de
    ld a, e
    or d
    jr nz, .load_palette_bytes
    ret

; converts gameobject number to real (dual) sprite number 
; hl: gameobject number
; return (de): corresponding sprite number (character sprite 1)
; return (bc): corresponding sprite number (character sprite 2)
sptr_get_sprite_number_by_gameobject_id:
    push bc
    push hl
    ld bc, gobj_0
    ld a, c
    sub l
    ld l, a
    ld a, b
    sbc h
    or l
    pop hl
    jr z, .sprite_3
    jr .next_1
    
.sprite_3:
    pop bc
    ld de, sprite_3
    ld bc, sprite_4
    ret

.next_1:
    push hl
    ld bc, gobj_1
    ld a, c
    sub l
    ld l, a
    ld a, b
    sbc h
    or l
    pop hl
    jr z, .sprite_5
    jr .default_sprite
    
.sprite_5:
    pop bc
    ld de, sprite_5
    ld bc, sprite_6
    ret

.default_sprite:
    pop bc
    ld de, sprite_5
    ld bc, sprite_6
    ret
    