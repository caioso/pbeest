; Project Beest
; Main Assembly File
; Developed by Caio Souza Oliveira
; 7 Aug 2019

; includes
include "inc/hardware.inc"


; interrupt routine reservation
section "interrupt_vector", rom0[$0040]
include "infra/interrupt_vector.z80"

; main code section
section "start", rom0[$0100]
    nop 
    jp main

; rom header definition (macro defined in inc/hardware.inc)
; note: ROM name must have 15 bytes (the number indicate the stable build number)
    ROM_HEADER_COLOR    "PBEEST.00000001", CART_MBC5_RAM_BATTERY, ROM_1536K, RAM_32K

; RAM general use utilities
include "ram/ram_utils.z80"
include "ram/global_variables.z80"

; External functions
include "external/math.z80"

; include time handlers
include "time/delay.z80"

; include input handler
include "joypad/input.z80"

; include tile loader
include "graphics/tiles_loader.z80"

; include display handler
include "graphics/display.z80"

; include background controlller
include "background/background_controller.z80"

; include window controller
include "window/window_controller.z80"

; include graphics data
include "graphics/hud_palette.z80"
include "graphics/hud_tiles.z80"
include "graphics/hero.z80"
include "graphics/hero_palette.z80"

; include palettes and tiles
include "graphics/sample_map_palette.z80"
include "graphics/sample_map_tiles.z80"

; include sprite controller
include "sprite/sprite_controller.z80"

; include bank controller
include "banks/banks_controller.z80"

; include hud controller
include "hud/hud_controller.z80"

; include dialogs files
include "hud/dialog/dialogs.z80"

; include character contoller
include "character/character_controller.z80"

; include game objects controller
include "game_objects/game_objects_controller.z80"

; include map controller
include "map/map_controller.z80"

; include Rooms (to be moved to separate banks in the future)
include "map/rooms/sample_room.z80"
include "map/rooms/sample_room_right.z80"
include "map/rooms/sample_room_top.z80"
include "map/rooms/sample_room_left.z80"
include "map/rooms/sample_room_bottom.z80"

section "main_function", rom0

; main function
; bootstrap ROM
; clear pallete, background, window and sprite maps
main:
    ; disable interrupts
    di
    ; load stack
    ld sp, $FFFF

    ; initialize DMA function
    call sprt_copy_dma

    ; intialize global tile counter
    ld hl, $0
    ld bc, $0
    call initialize_tile_counter

    ; initialize background
    call bgc_initialize_background

    ; initialize window
    call wnd_initialize_window

    ; initialize hud
    call hud_initialize_hud

    ; initialize gob table
    call goc_initialize_gobj_table

    ; TEMP
    ; load intial background palettes
    ld hl, hud_palette_begin
    ld de, hud_palette_end - hud_palette_begin
    ; the hud palette must be the last one!
    ld bc, 7 ; target palette index (each palette has 4 colors)
    call bgc_load_background_palette
    
    ; Intialize character tiles and palettes
    call chr_load_character_tiles_and_palettes

    ; Initialize Sprite memory
    call sprt_clear_sprites

    ; Initialize total number of game objects
    ld a, $00
    ld [gobj_total_game_objects], a

    ; Intialize character 0
    ld d, $50 ; x
    ld e, $48 ; y
    ld c, $56 ; sprite
    ld b, $00 ; default attributes
    call chr_initialize_character

    ; Initialize Map controller
    call map_initialize_map_controller

    ; load map's tiles and palettes
    ; display no animations, load tiles and palettes (a)
    ; load *sample* room (&hl)
    ; first tile initial address (&bc)
    ; map GRAPHICAL-LUTs position (d:X, e:Y) the logic LUT is always loaded in the same place.a
    ld a, $00
    ld [map_current_room_id], a

    ; Request Map Load
    ld hl, room_initialize_game_objects
    ld a, l
    ld [map_game_object_initializer_address_LSB], a
    ld a, h
    ld [map_game_object_initializer_address_MSB], a
    ld hl, room_init_callback
    ld a, l
    ld [map_init_callback_address_LSB], a
    ld a, h
    ld [map_init_callback_address_MSB], a
    ld hl, room_process_callback
    ld a, l
    ld [map_process_callback_address_LSB], a
    ld a, h
    ld [map_process_callback_address_MSB], a
    ld a, $02
    ld [map_bank_ID_LSB], a
    ld a, $00
    ld [map_bank_ID_MSB], a
    ld a, map_tile_base_section_8000 | map_load_origin | map_load_tiles | map_load_palettes
    ld [map_loading_settings_flags], a
    ld hl, sample_room_begin
    ld a, l
    ld [map_room_data_address_LSB], a
    ld a, h
    ld [map_room_data_address_MSB], a 
    ld a, $A0
    ld [map_room_tiles_address_LSB], a
    ld a, $85
    ld [map_room_tiles_address_MSB], a
    ld a, $00
    ld [map_room_X], a
    ld a, $00
    ld [map_room_Y], a
    
    ; Load Map
    call map_request_map_load
    call map_commit_map_load_request

    ; start display register
    ; set lcd on
    ; set bg memory to 8000 and 9800
    ; set bg layer on
    ; set sprite 16 x 8 pixe;s
    ; set sprite layer on
    ; set window memory to 9c000
    ld a, LCDCF_ON|LCDCF_BG8000|LCDCF_BG9800|LCDCF_BGON|LCDCF_OBJ16|LCDCF_OBJON|LCDCF_WIN9C00|LCDCF_WINON
    ld [rLCDC], a

    ; Double clock speed
    ld a, $01
    ld [rKEY1], a
    stop

    ; initialize joypad
    call joypad_initialize

.main_loop
    nop
    ;call display_wait_vblank

    ; read input
    call joypad
    
    ; Player Controlled Loop Iteration
    call chr_player_controlled_character_loop

    ; run current process callback
    ; load target bank to be used during map loading
    call bac_switch_bank
    call bac_jump_to_process_callback
    call bac_restore_bank

    ; in case a request has been submitted
    call map_commit_map_load_request
    
    ; call the DMA subroutine we copied to HRAM
    ; which then copies the bytes to the OAM and sprites begin to draw
    call display_wait_vblank
    call _HRAM
    ; Assynchronously refreshes background to avoid screen tearing (this function may be called internally in other functions as well)
    call bgc_safely_update_background
    jp .main_loop