; Project Beest
; Main Assembly File
; Developed by Caio Souza Oliveira
; 7 Aug 2019

; includes
include "inc/hardware.inc"

; interrupt routine reservation
section "interrupt_vector", rom0[$0040]
include "infra/interrupt_vector.z80"

; main code section
section "start", rom0[$0100]
    nop 
    jp main

; rom header definition (macro defined in inc/hardware.inc)
; note: ROM name must have 15 bytes (the number indicate the stable build number)
    ROM_HEADER_COLOR    "PBEEST.00000001", CART_MBC5_RAM_BATTERY, ROM_1536K, RAM_32K

; RAM general use utilities
include "ram/ram_utils.z80"
include "ram/global_variables.z80"

; External functions
include "external/math.z80"

; include time handlers
include "time/delay.z80"

; include input handler
include "joypad/input.z80"

; include tile loader
include "graphics/tiles_loader.z80"

; include display handler
include "graphics/display.z80"

; include background controlller
include "background/background_controller.z80"

; include window controller
include "window/window_controller.z80"

; include graphics data
include "graphics/hud_palette.z80"
include "graphics/hud_tiles.z80"
include "graphics/hero.z80"
include "graphics/hero_palette.z80"

; include sprite controller
include "sprite/sprite_controller.z80"

; include hud controller
include "hud/hud_controller.z80"

; include dialogs files
include "hud/dialog/dialogs.z80"

; include character contoller
include "character/character_controller.z80"

; include map controller
include "map/map_controller.z80"

; include Rooms (to be moved to separate banks in the future)
include "map/rooms/sample_room.z80"

; main function
; bootstrap ROM
; clear pallete, background, window and sprite maps
main:
    ; disable interrupts
    di
    ; load stack
    ld sp, $FFFF

    ; intialize global tile counter
    ld hl, $0
    ld bc, $0
    call initialize_tile_counter

    ; initialize background
    call bgc_initialize_background

    ; initialize window
    call wnd_initialize_window

    ; initialize hud
    call hud_initialize_hud

    ; TEMP
    ; load intial background palettes
    ld hl, hud_palette_begin
    ld de, hud_palette_end - hud_palette_begin
    ; the hud palette must be the last one!
    ld bc, 7 ; target palette index (each palette has 4 colors)
    call bgc_load_background_palette
    
    ; Intialize character tiles and palettes
    call chr_load_character_tiles_and_palettes

    ; Intialize character 0
    ld hl, character_0
    ld c, $1A
    ld b, $1A
    ld a, $56
    call chr_initialize_character

    ; load *sample* room
    ld hl, sample_room_begin
    call map_load_room

    ; start display register
    ; set lcd on
    ; set bg memory to 8000 and 9800
    ; set bg layer on
    ; set sprite 16 x 8 pixe;s
    ; set sprite layer on
    ; set window memory to 9c000
    ld a, LCDCF_ON|LCDCF_BG8000|LCDCF_BG9800|LCDCF_BGON|LCDCF_OBJ16|LCDCF_OBJON|LCDCF_WIN9C00|LCDCF_WINON
    ld [rLCDC], a

.main_loop
    nop

    call display_wait_vblank

    ; read input
    call joypad
    
    ; Player Controlled Loop Iteration
    call chr_player_controlled_character_loop

    ; TEMP 
    ; joypad test
    ld l, key_a
    call is_key_down
    jr z, .no_key_detected
        ; check colision target, to show correct message
        ld hl, collision_target
        ld a, [hl]
        cp a, $01
        jr nz, .dialog_2
            ; First Target
            ld de, dialog_page_0_end - dialog_page_0
            ld hl, dialog_page_0
            call hud_copy_text_buffer
            ld de, dialog_page_0_end - dialog_page_0
            jr .show_text
.dialog_2:
            ; First Page
        ld de, dialog_page_1_end - dialog_page_1
        ld hl, dialog_page_1
        call hud_copy_text_buffer
        ld de, dialog_page_1_end - dialog_page_1

.show_text:

        ld a, text_box_all_animations ;text_box_start_animation
        call hud_show_text

        ; Intermediate Page
        ;ld de, dialog_page_1_end - dialog_page_1
        ;ld hl, dialog_page_1
        ;call hud_copy_text_buffer
        ;ld de, dialog_page_1_end - dialog_page_1
        ;ld a, text_box_end_animation ;text_box_no_animations
        ;call hud_show_text

        ; Final Page
        ;ld de, dialog_page_2_end - dialog_page_2
        ;ld hl, dialog_page_2
        ;call hud_copy_text_buffer
        ;ld de, dialog_page_2_end - dialog_page_2
        ;ld a, text_box_end_animation
        ;call hud_show_text

        ; delay settings
        ; $FF -> outer loop control (255 times)
        ; $02 -> inner loop contorl (2 times)
        ;ld hl, $FFFF
        ;call time_controlled_two_step_delay

        ; Standalone Page
        ;ld de, dialog_page_3_end - dialog_page_3
        ;ld hl, dialog_page_3
        ;call hud_copy_text_buffer
        ;ld de, dialog_page_3_end - dialog_page_3
        ;ld a, text_box_all_animations
        ;call hud_show_text

        ; delay settings
        ; $FF -> outer loop control (255 times)
        ; $02 -> inner loop contorl (2 times)
        ;ld hl, $FFFF
        ;call time_controlled_two_step_delay

        ; Standalone Page
        ;ld de, dialog_page_4_end - dialog_page_4
        ;ld hl, dialog_page_4
        ;call hud_copy_text_buffer
        ;ld de, dialog_page_4_end - dialog_page_4
        ;ld a, text_box_all_animations
        ;call hud_show_text

        ; delay settings
        ; $FF -> outer loop control (255 times)
        ; $02 -> inner loop contorl (2 times)
        ;ld hl, $FFFF
        ;call time_controlled_two_step_delay

        ; Standalone Page
        ;ld de, dialog_page_5_end - dialog_page_5
        ;ld hl, dialog_page_5
        ;call hud_copy_text_buffer
        ;ld de, dialog_page_5_end - dialog_page_5
        ;ld a, text_box_all_animations
        ;call hud_show_text
        

.no_key_detected:
    jp .main_loop