; Project Beest
; Game Objects Controller
; Developed by Caio Souza Oliveira
; 01 Oct 2019

; Preapare memory to receive a batch of game objects (to be used during map transition animation *ONLY*)
; *NOTE* The table is always initialized with $FF (to avoid confusion with game object index 0)
gobj_intitialize_game_object_transition_animation_table:
    push bc
    push hl
    ld c, $00
    ld hl, gobj_transition_table
.continue:
    ld a, $FF
    ld [hl], a
    inc hl
    inc c
    ld a, c
    cp gobj_transition_table_size
    jr nz, .continue
    pop hl
    pop bc
    ret

; Store game object into transition table for use during transition
; a: Target game object index (0-15)
; de: game object position (d: X, e: Y)
; c: target game object sprite
; b: attribute
goc_insert_game_object_on_transition_table:
    ; Calculate address within the transition table, based on the provided index.
    push af
    push hl
    push de
    push bc
    push af
    ; hl holds the GOBJ index
    ld l, a
    ld h, 0
    ; de holds the size of a single entru in the table (5 bytes)
    ld e, $05
    ld d, $00

    ; only DE will be used
    call mul_DE_HL_BCDEu

    ld hl, gobj_transition_table
    ld a, e
    add l
    ld l, a
    ld a, d
    adc h
    ld h, a
    pop af 
    pop bc
    pop de

    ; From this point onwards, hl holds the initial address of the given entry in the table
    ld [hl], a ; first entry holds the index
    inc hl
    ld a, e
    ld [hl], a
    inc hl
    ld a, d
    ld [hl], a
    inc hl
    ld a, c
    ld [hl], a
    inc hl
    ld a, b
    ld [hl], a 

    pop hl
    pop af
    ret

; Bring a game object to position (loading the coordinates from the gobj_transition_table) 
; a: target game object
; b: consider screen scrolling position (0: false, 1: true)
goc_bring_game_object_to_screen:
; Calculate address within the transition table, based on the provided index.
    push bc
    push af
    push hl
    push bc ; bc will be used to determine whether the screen offset should be added to the loading game object's position
    push de
    push af
    ; hl holds the GOBJ index
    ld l, a
    ld h, 0
    ; de holds the size of a single entru in the table (5 bytes)
    ld e, $05
    ld d, $00

    ; only DE will be used
    call mul_DE_HL_BCDEu

    ld hl, gobj_transition_table
    ld a, e
    add l
    ld l, a
    ld a, d
    adc h
    ld h, a
    pop af 
    pop de

    ld c, a
    ; check game object status before proceeding.
    ld a, [hl]
    cp $FF
    jp z, .return
    ; Check whether the game object is already on screen (higher bit is 1)
    and $80
    cp $80
    jp z, .return

    ; mark it to sign it is on screen
    ld a, [hl]
    or $80
    ld [hl], a

    ld a, c
    ; Calculate address in the Sprite memory (DMA-accessible) basde on the index stored in a.
    ; multiply a by 8 (2 sprites)
    sla a
    sla a
    sla a
    ld de, sprite_memory_begin
    ld c, a
    ld a, e
    add c
    ld e, a
    ld a, d
    adc $00
    ld d, a

    ; check whether the screen offset should be added to the positions
    pop bc
    ld a, b
    cp $01
    jr nz, .skip_offset

.set_offset:
    ; There is a configuration of the offsets signs (positive/negative) for each screen scrolling type. set them here.
    push hl
    ld l, map_load_above
    call check_animation_direction
    pop hl
    cp $01
    jr nz, .check_below

        ; map_current_y_offset and map_current_x_offset are already in *pixels*
        ; Y negative, X positive
        ld a, [map_current_y_offset]
        cpl 
        inc a
        ld b, a
        ld a, [map_current_x_offset]
        ld c, a
        jr .position_set

.check_below:
    push hl
    ld l, map_load_below
    call check_animation_direction
    pop hl
    cp $01
    jr nz, .check_left

        ; map_current_y_offset and map_current_x_offset are already in *pixels*
        ; Y positive, X positive
        ld a, [map_current_y_offset]
        ld b, a
        ld a, [map_current_x_offset]
        ld c, a
        jr .position_set

.check_left:
    push hl
    ld l, map_load_left
    call check_animation_direction
    pop hl
    cp $01
    jr nz, .check_right

        ; map_current_y_offset and map_current_x_offset are already in *pixels*
        ; Y positive, X negative
        ld a, [map_current_y_offset]
        ld b, a
        ld a, [map_current_x_offset]
        cpl
        inc a
        ld c, a
        jr .position_set

.check_right:

        ; map_current_y_offset and map_current_x_offset are already in *pixels*
        ; Y positive, X positive
        ld a, [map_current_y_offset]
        ld b, a
        ld a, [map_current_x_offset]
        ld c, a
        jr .position_set
    
.skip_offset:
    ld c, $00
    ld b, $00

.position_set:
    ; from this point onwards, de holds the address in the sprite memory.
    ; correct sprite position
    inc hl ; skip index byte in gobj_transition_table
    ld a, [hl]
    add b
    ld [de], a
    inc hl
    inc de
    ld a, [hl]
    add c
    ld [de], a
    
    ; point back to Y
    dec hl

    ; calculate address of the second half
    ld a, e
    add $03
    ld e, a
    ld a, d
    adc $00
    ld d, a

    ld a, [hl]
    add b
    ld [de], a
    inc hl
    inc de
    ld a, [hl]
    add c
    add $08
    ld [de], a

    ; correct stack
    push bc

.return:
    pop bc
    pop hl
    pop af
    pop bc
    ret

; Hide a game object during the transition (since it has wrapped around)
; a: target game object
goc_hide_game_object_during_transition:
; Calculate address within the transition table, based on the provided index.
    push bc
    push af
    push hl
    push de
    push af
    ; hl holds the GOBJ index
    ld l, a
    ld h, 0
    ; de holds the size of a single entru in the table (5 bytes)
    ld e, $05
    ld d, $00

    ; only DE will be used
    call mul_DE_HL_BCDEu

    ld hl, gobj_transition_table
    ld a, e
    add l
    ld l, a
    ld a, d
    adc h
    ld h, a
    pop af 
    pop de

    ld c, a
    ; check game object status before proceeding.
    ld a, [hl]
    cp $FF
    jr z, .return
    ; Check whether the game object is already on screen (higher bit is 1)
    and $80
    cp $80
    jr z, .return

    ; mark it to sign it is on screen
    ld a, [hl]
    or $80
    ld [hl], a

.return:
    pop hl
    pop af
    pop bc
    ret


; Bring all game objects to position (loading the coordinates from the gobj_transition_table)
; a, for scrolling? 1: true, 0: false
goc_bring_all_other_game_objects_to_screen:
    push af
    push hl
    push bc
    push de
    
    ; save a's value into b for later use.
    ld b, a

    ; Run through the table, looking for game objects not on screen
    ld hl, gobj_transition_table
    ld de, sprite_memory_begin
    ld c, $00
.continue:

    ld a, c
    call goc_bring_game_object_to_screen
   
    jr .increment_counter

.skip_iteration:
.increment_counter:
    inc c
    ld a, c
    ; Since we are going 'struct-by-struct' the whole loop only runs 20 times (gobj_table_size)
    cp gobj_table_size
    jr nz, .continue

    pop de
    pop bc
    pop hl
    pop af
    ret

; Initialize Game Object.
; *NOTE* since the player character should not be updated during transition, this function avoids adding the player character to the 
;        game object transition table.
; a: Target game object index (0-15)
; de: game object position (d: X, e: Y)
; c: target game object sprite
; b: attribute
goc_initialize_game_object:

    ; three things to do
    ; update positions based on the real map's origin
    ; load game object data into the DMA mempory location
    ; mark the game object as taken in the gobj_table.

    ; save af to be used in the DMA memory initialization
    push af
    ld a, [map_real_x]
    sla a
    sla a
    sla a
    add d
    ld d, a
    ld a, [map_real_y]
    sla a
    sla a
    sla a
    add e
    ld e, a
    pop af

    push bc
    push af
    ld c, a
    ld a, [ram_player_character_id]
    cp c
    jr z, .player_character_found_skip_adding_to_transition
        pop af
        pop bc
        ; store game object on transition table
        call goc_insert_game_object_on_transition_table

        ; since the sprite data has been loaded to transition table, hide all game obejcts (set x/y to 0)
        ; They will be brought back to the screen durign the transition or clean up steps.
        ld e, $0
        ld d, -$8
        jr .skip_stack_correction

.player_character_found_skip_adding_to_transition
    pop af
    pop bc
    
.skip_stack_correction:
    ; save gobj index in the table to be used later in the gobj_table
    push af
    ; Get game object address (stored in hl)
    call goc_get_gameobject_address

    ; load game object data into the target game object address
    ld a, e
    ld [hl], a
    inc hl
    ld a, d
    ld [hl], a
    inc hl
    ld a, c
    ld [hl], a
    inc hl
    ld a, b ; No attribute change for now
    ld [hl], a
    inc hl

    ; load data for second half
    ld a, e
    ld [hl], a
    inc hl
    ld a, d
    ; x = x + 8
    add a, $08
    ld [hl], a
    inc hl 
    ld a, c
    ; sprite = sprite + 2
    add a, $02
    ld [hl], a
    inc hl
    ld a, b ; No attribute change for now
    ld [hl], a

    pop af

    ; temp save index
    ld b, a

    ld hl, gobj_table
    ld a, l
    add b
    ld l, a
    ld a, h
    adc $00
    ld h, a
    
    ld a, game_object_taken_for_transition
    ld [hl], a

    ; Update total game objects
    ld a, [gobj_total_game_objects]
    inc a
    ld [gobj_total_game_objects], a

    ret

; Clears game object, based on its postiion.
; a: game object index
goc_clear_game_object:
    push bc
    ld b, a

    ld hl, gobj_table
    add l
    ld l, a
    ld a, h
    adc $00
    ld h, a
    ld a, $FF
    ld [hl], a

    ld a, b
    ; After calling goc_get_gameobject_address, hl holds the address to the target game object sprite
    call goc_get_gameobject_address

    ld a, $00
    ld [hl], a
    inc hl

    ; X
    ld [hl], a
    inc hl

    ; Tile
    ld [hl], a
    inc hl

    ; Attribute
    ld [hl], a
    inc hl

    ; Y
    ld [hl], a
    inc hl

    ; X
    ld [hl], a
    inc hl

    ld [hl], a
    inc hl

    ; Attribute
    ld [hl], a
    inc hl

    ; load total game objects in the map
    ld a, [gobj_total_game_objects]
    cp $00
    jr z, .skip
        dec a
        ld [gobj_total_game_objects], a

.skip:
    pop bc

    ret

; Returns base address for target game object
; a: target game objecy
; hl: initial address of the game object register
goc_get_gameobject_address:
    cp a, $00
    ld hl, gobj_0
    ret z
    cp a, $01
    ld hl, gobj_1
    ret z
    cp a, $02
    ld hl, gobj_2
    ret z
    cp a, $03
    ld hl, gobj_3
    ret z
    cp a, $04
    ld hl, gobj_4
    ret z
    cp a, $05
    ld hl, gobj_5
    ret z
    cp a, $06
    ld hl, gobj_6
    ret z
    cp a, $07
    ld hl, gobj_7
    ret z 
    cp a, $08
    ld hl, gobj_8
    ret z
    cp a, $09
    ld hl, gobj_9
    ret z
    cp a, $0A
    ld hl, gobj_10
    ret z
    cp a, $0B
    ld hl, gobj_11
    ret z
    cp a, $0C
    ld hl, gobj_12
    ret z
    cp a, $0D
    ld hl, gobj_13
    ret z
    cp a, $0E
    ld hl, gobj_14
    ret z
    cp a, $0F
    ld hl, gobj_15
    ret z
    cp a, $10
    ld hl, gobj_16
    ret z
    cp a, $11
    ld hl, gobj_17
    ret z
    cp a, $12
    ld hl, gobj_18
    ret z
    cp a, $13
    ld hl, gobj_19
    ret z
    ld hl, gobj_20
    ret

; Initializes Game Object table with 0xFF
goc_initialize_gobj_table:
    ld c, $00
    ld hl, gobj_table
    ld b, $FF
.next:
    ld a, b
    ld [hl], a
    inc hl
    inc c
    ld a, 20
    cp c
    jr nz, .next
    ret

; Finds a slot in the game object table
; return a: target game objhecr index
goc_find_game_object_table_slot:
    push bc
    push hl
    ld c, $00
    ld hl, gobj_table
.next:
    ld a, [hl]
    cp a, $FF
    ld a, c
    jr z, .finish

    inc hl
    inc c
    ld a, 20
    cp c
    jr nz, .next

    ; if running this line, no slots have been fond
    ld a, $FF

.finish:
    pop hl
    pop bc
    ret

; Bring a game object to position (loading the coordinates from the gobj_transition_table) 
; a: target game object
; hl: target position (to appear on screen, h:Y, l:X)
goc_bring_game_object_to_screen_specifying_position:

; Calculate address within the transition table, based on the provided index.
    push bc
    push af
    push hl
    push de
    push af
    ; hl holds the GOBJ index
    ld l, a
    ld h, 0
    ; de holds the size of a single entru in the table (5 bytes)
    ld e, $05
    ld d, $00

    ; only DE will be used
    call mul_DE_HL_BCDEu

    ld hl, gobj_transition_table
    ld a, e
    add l
    ld l, a
    ld a, d
    adc h
    ld h, a
    pop af 
    ; save a for later
    ld c, a
    pop de

    ld a, l
    ld e, a
    ld a, h
    ld d, a

    pop hl
    ; check game object status before proceeding.
    ld a, [de]
    cp $FF
    jr z, .return
    ; Check whether the game object is already on screen (higher bit is 1)
    and $80
    cp $80
    jr z, .return

    ; mark it to sign it is on screen
    ld a, [de]
    or $80
    ld [de], a

    ld a, c
    ; Calculate address in the Sprite memory (DMA-accessible) basde on the index stored in a.
    ; multiply a by 8  (2 game sprites)
    sla a
    sla a
    sla a
    ld de, sprite_memory_begin
    ld c, a
    ld a, e
    add c
    ld e, a
    ld a, d
    adc $00
    ld d, a

    ; from this point onwards, de holds the address in the sprite memory.
    ; correct sprite position
    ld a, h
    ld [de], a
    inc de
    ld a, l
    ld [de], a

    ; calculate address of the second half
    ld a, e
    add $03
    ld e, a
    ld a, d
    adc $00
    ld d, a

    ld a, h
    ld [de], a
    inc de
    ld a, l
    add $08
    ld [de], a

.return:
    pop af
    pop bc
    ret

; Checks whether a game object should be brought to screen based on its position and the screen (scroll) position.
; a: target game object index
; return a: 0 not yet; 1: should be broght to screen
; return hl: target position to load the requested game object
goc_should_game_object_be_brought_in:
    push bc
    push de
    ; hl holds the GOBJ index
    ld l, a
    ld h, 0
    ; de holds the size of a single entru in the table (5 bytes)
    ld e, $05
    ld d, $00

    ; only DE will be used
    call mul_DE_HL_BCDEu

    ld hl, gobj_transition_table
    ld a, e
    add l
    ld l, a
    ld a, d
    adc h
    ld h, a
    pop de

    ; There is a configuration of the offsets signs (positive/negative) for each screen scrolling type. set them here.
    push hl
    ld l, map_load_above
    call check_animation_direction
    pop hl
    cp $01
    jr nz, .check_below
    ; check game object status before proceeding.
    ; THIS IS ONLY VALID FOR Y for now
    inc hl
    ld a, [hl]
    ld c, a
    ld a, [background_scrolling_request_Y]
    cp c
    jr z, .above_yes
    inc c
    cp c
    jr z, .above_yes
    inc c
    cp c
    jr z, .above_yes
    inc c
    cp c
    jr z, .above_yes
    inc c
    cp c
    jp nz, .not

.above_yes:    
    ; return position is in hl
    inc hl 
    ld a, [hl]
    ld l, a
    ; Set game object at the top of the screen.        
    ld a, $08
    ld c, a
    ld h, a
    
    ; return as true
    ld a, 1
    pop bc
    ret

.check_below:
; There is a configuration of the offsets signs (positive/negative) for each screen scrolling type. set them here.
    push hl
    ld l, map_load_below
    call check_animation_direction
    pop hl
    cp $01
    jr nz, .not
    ; check game object status before proceeding.
    ; THIS IS ONLY VALID FOR Y for now
    inc hl
    ld a, [hl]
    ld c, a
    ld a, [background_scrolling_request_Y]
    ; The bottom of the screen appears first in this case. Add screen height to the scrolling position.
    add $90
    cp c
    jr z, .below_yes
    dec c
    cp c
    jr z, .below_yes
    dec c
    cp c
    jr z, .below_yes
    dec c
    cp c
    jr z, .below_yes
    dec c
    cp c
    jp nz, .not

.below_yes:
    ; return position is in hl
    inc hl 
    ld a, [hl]
    ld l, a
    ; Set game object at the bottom of the screen
    ld a, $98
    ld c, a
    ld h, a
    
    ; return as true
    ld a, 1
    pop bc
    ret

; The game object will still have to appear, but not yet
.not:
    ld a, 0 
    pop bc
    ret

; scroll all game objects by a given amount on X and Y based on camera movement
; e: amount in X
; d: amoint in Y
; b: is for transition? (1: will load game objects from the transition table to the DMA memory as the camera pans; 0: simply scroll valid GOBJ)
goc_scroll_game_objects_excluding_player:
    
    ld c, $00
    ; Load game objects, add offset and continue
.continue:
    ld a, [ram_player_character_id]
    cp c
    jr z, .skip_scroll

    ; Check whether the game object is already on screen 
    ld a, c
    call goc_is_game_object_in_use
    cp $00
    jr z, .skip_scroll
    ld a, b
    cp $00
    jr z, .just_scroll
    ld a, c
    call goc_is_game_object_on_screen
    cp $00
    jr z, .check_whether_it_should_be_loaded_in
.just_scroll:
        ld a, c
        call goc_get_gameobject_address
        ld a, [hl]
        add d
        ld [hl], a
        inc hl
        ld a, [hl]
        add e
        ld [hl], a
        inc hl
        inc hl
        inc hl
        ld a, [hl]
        add d
        ld [hl], a
        inc hl
        ld a, [hl]
        add e
        ld [hl], a
        jr .skip_scroll

.check_whether_it_should_be_loaded_in:
        push hl
        push de
        ld a, c
        call goc_should_game_object_be_brought_in
        cp $00
        jr z, .correct_stack_and_skip
            ld a, c
            call goc_bring_game_object_to_screen_specifying_position
            
.correct_stack_and_skip:
    pop de
    pop hl

.skip_scroll:
    inc c
    ld a, c
    cp 20 ; gobj_table size
    jr nz, .continue
    ret

; Runs through the game object table, looking for game objects that are not on screen.
; move them to 0 during the transition. This function does not really removes the game object, but hide it during the transition only.
; goc_remove_game_objects_after_transition will do it.
goc_hide_non_visible_gobj_for_the_transition:
    push hl
    push bc
    push de

    ld c, $00
.continue:

    ld a, [ram_player_character_id]
    cp c
    jr z, .skip

    ld a, c
    ; After calling goc_get_gameobject_address, hl holds the address to the target game object sprite
    call goc_get_gameobject_address

    ; Y
    ld a, [hl]
    ld d, a
    inc hl

    ; X
    ld a, [hl]
    ld e, a

    call goc_is_visible
    cp $01
    jr z, .skip
        ; point to Y again
        dec hl

        ld a, $00
        ld [hl], a
        inc hl

        ; X
        ld [hl], a
        inc hl

        ; Tile
        ld [hl], a
        inc hl

        ; Attribute
        ld [hl], a
        inc hl

        ; Y
        ld [hl], a
        inc hl

        ; X
        ld [hl], a
        inc hl

        ld [hl], a
        inc hl

        ; Attribute
        ld [hl], a
        inc hl
        

.skip:
    inc c
    ld a, 20
    cp c
    jr nz, .continue

    pop de
    pop bc
    pop hl
    ret

; Checks whether a game objects is visble
; d: gobj Y
; e: gobj X
; return a: 1 visible, 0: not visible
goc_is_visible:

    ; X (left) 
    ld a, $A0
    cp e
    jr c, .not_visible

    ; Y (left)
    ld a, $90
    cp d
    jr c, .not_visible

.visible
    ld a, $01
    ret

.not_visible:
    ld a, $00
    ret

; Remvoe remaining game objects from screen and table after the transition animation is complete.
goc_remove_game_objects_after_transition:
    push hl
    push bc
    push de

    ld c, $00
.continue:

    ld a, [ram_player_character_id]
    cp c
    jr z, .skip

    ; calulate address based on index 'c' into gobj_table
    ld hl, gobj_table
    ld a, l
    add c
    ld l, a
    ld a, h
    adc $00
    ld h, a
   
    ; check whether the game object must be removed after the transtion
    ld a, [hl]
    cp game_object_taken
    jr nz, .skip
        
        ; if take, clear entry and remove element from screen, decrement game object counter.
        ld a, $FF
        ld [hl], a

        ld a, c
        ; After calling goc_get_gameobject_address, hl holds the address to the target game object sprite
        call goc_get_gameobject_address

        ld a, $00
        ld [hl], a
        inc hl

        ; X
        ld [hl], a
        inc hl

        ; Tile
        ld [hl], a
        inc hl

        ; Attribute
        ld [hl], a
        inc hl

        ; Y
        ld [hl], a
        inc hl

        ; X
        ld [hl], a
        inc hl

        ld [hl], a
        inc hl

        ; Attribute
        ld [hl], a
        inc hl

        dec a
        ld [gobj_total_game_objects], a

.skip:
    inc c
    ld a, 20
    cp c
    jr nz, .continue

    pop de
    pop bc
    pop hl
    ret

; Normalize game object map table (convert's game_object_taken_for_transition ($AA) into game_object_taken ($BB))
goc_normalize_game_object_usage_table:
    push hl
    push de
    ld hl, gobj_table
    ld d, $00
.continue:
    ld a, [hl]
    cp game_object_taken_for_transition
    jr nz, .skip_cleanup
        ld a, game_object_taken
        ld [hl], a

.skip_cleanup:
    inc hl
    inc d
    ld a, d
    cp 20
    jr nz, .continue
    pop de
    pop hl
    ret

; checks the status of the gameobject in gobj_table
; a: target game object index
; return a:0 not in use, 1 in use.
goc_is_game_object_in_use:
    push bc
    ld hl, gobj_table
    ld b, a
    ld a, l
    add b
    ld l, a
    ld a, h
    adc $00
    ld h, a
    pop bc
    ld a, [hl]
    cp $FF ; Not-taken gameobject
    jr z, .not_taken
        ld a, $01
        ret 
.not_taken:
    ld a, $00
    ret

; Checks whether a game object is on screen.
; a: target game object index
; return a:0 not on screen, 1 on screen
goc_is_game_object_on_screen:
    push bc
    push hl
    push de
    ; hl holds the GOBJ index
    ld l, a
    ld h, 0
    ; de holds the size of a single entru in the table (5 bytes)
    ld e, $05
    ld d, $00

    ; only DE will be used
    call mul_DE_HL_BCDEu

    ld hl, gobj_transition_table
    ld a, e
    add l
    ld l, a
    ld a, d
    adc h
    ld h, a
    pop de

    ; check game object status before proceeding.
    ld a, [hl]
    ; Check whether the game object is already on screen (higher bit is 1)
    and $80
    cp $80
    jr z, .on_screen
    ld a, $00
    pop hl
    pop bc
    ret
.on_screen:
    ld a, $01
    pop hl
    pop bc
    ret

; Detects collisiton between character [ram_player_character_id] and character 
; d: X position
; e: Y Position
; a: 1 - collision happened; 0 - no collision happened
goc_detect_collision_width_game_objects:

    push af
    ld a, [ram_player_character_id]
    call goc_get_gameobject_address
    pop af

    inc hl
    ld a, [hl]
    add a, d
    ; Add bounding box origin
    add a, $03
    ld b, a
    dec hl
    ld a, [hl]
    add a, e
    ; Add bounding box origin
    add a, $07
    ld c, a

    ld a, [gobj_total_game_objects]
    ; compensate for the player game object
    inc a
    cp $01
    jr z, .finalize

    ; load table size
    ld a, gobj_table_end - gobj_table

    ld e, a
    ld d, $00

.check_game_object:

    ld a, [ram_player_character_id]
    cp d
    
    ; align stack (continue will pop de)
    push de
    jr z, .continue
    pop de

    push hl
    ld hl, gobj_table
    ld a, d
    add l
    ld l, a
    ld a, h
    adc $00
    ld h, a

    ; if $FF (game pbject has not been taken), skip
    ld a, [hl]
    cp $FF
    pop hl
    
    ; align stack (continue will pop de)
    push de
    jr z, .continue
    pop de
    ld a, d

    ; After calling goc_get_gameobject_address, hl holds the address to the target game object sprite
    call goc_get_gameobject_address

    push de
    ; Y
    ld a, [hl]
    ld d, a

    inc hl
    ; X
    ld a, [hl]
    ld e, a

    ; Negative Check.
    ;
    ;   r1(X1, Y1)           
    ;   +------------------+
    ;   |                  |
    ;   |                  |
    ;   |                  |
    ;   |                  |
    ;   |                  |
    ;   |                  |
    ;   +------------------+
    ;                      r1(X2, Y2)
    ;                      X2 = X1 + 16
    ;                      Y2 = Y1 + 16

    ; if ((rect1.x < rect2.x + rect2.width &&
    ; rect1.x + rect1.width > rect2.x &&
    ; rect1.y < rect2.y + rect2.height &&
    ; rect1.y + rect1.height > rect2.y)) 
    
    ; condition 1
    ; calculate rect1.x < rect2.x + rect2.width
    push de
    ld a, e
    add a, $10
    ld e, a

    ld a, b
    cp e
    pop de
    jr nc, .continue

    ; condition 2
    ; calculate rect1.x + rect1.width > rect2.x
    push bc
    ld a, b
    add a, $0A
    ld b, a

    ld a, b
    cp e
    pop bc
    jr c, .continue
    jr z, .continue

    ; condition 3
    ; calculate rect1.y < rect2.y + rect2.height
    push de
    ld a, d
    add a, $10
    ld d, a

    ld a, c
    cp d
    pop de
    jr nc, .continue

    ; condition 4
    ; calculate rect1.y + rect1.height > rect2.y
    push bc
    ld a, c
    add a, $09
    ld c, a

    ld a, d
    add a, $07
    ld d, a
    ld a, c
    cp d
    pop bc
    jr c, .continue
    jr z, .continue

.break:
    pop de

    ; set collision target
    ld a, d
    ld [collision_target], a
    
    ; set collision type
    ld a, collision_type_gob
    ld [collision_target_type], a
    
    ld a, 1
    ret

.continue:
    pop de

    inc d
    ld a, 20
    cp d
    jr nz, .check_game_object

.finalize:
    ld a, 0
    ret

; Detects collisiton between character [ram_player_character_id] and character. This intended primarily to adjust z-index
; d: X position
; e: Y Position
; a: 1 - collision happened; 0 - no collision happened
goc_detect_collision_width_game_objects_full_obj:

    push af
    ld a, [ram_player_character_id]
    call goc_get_gameobject_address
    pop af

    inc hl
    ld a, [hl]
    add a, d
    ; Add bounding box origin
    ;add a, $03
    ld b, a
    dec hl
    ld a, [hl]
    add a, e
    ; Add bounding box origin
    ;add a, $07
    ld c, a

    ld a, [gobj_total_game_objects]
    ; compensate for the player game object
    inc a
    cp $01
    jr z, .finalize

    ld e, a
    ld d, $00

.check_game_object:

    ld a, [ram_player_character_id]
    cp d
    ; align stack (continue will pop de)
    push de
    jr z, .continue
    pop de
    
    push hl
    ld hl, gobj_table
    ld a, d
    add l
    ld l, a
    ld a, h
    adc $00
    ld h, a

    ; if $FF (game pbject has not been taken), skip
    ld a, [hl]
    cp $FF
    pop hl
    
    ; align stack (continue will pop de)
    push de
    jr z, .continue
    pop de

    ld a, d

    ; After calling goc_get_gameobject_address, hl holds the address to the target game object sprite
    call goc_get_gameobject_address

    push de
    ; Y
    ld a, [hl]
    ld d, a

    inc hl
    ; X
    ld a, [hl]
    ld e, a

    ; Negative Check.
    ;
    ;   r1(X1, Y1)           
    ;   +------------------+
    ;   |                  |
    ;   |                  |
    ;   |                  |
    ;   |                  |
    ;   |                  |
    ;   |                  |
    ;   +------------------+
    ;                      r1(X2, Y2)
    ;                      X2 = X1 + 16
    ;                      Y2 = Y1 + 16

    ; if ((rect1.x < rect2.x + rect2.width &&
    ; rect1.x + rect1.width > rect2.x &&
    ; rect1.y < rect2.y + rect2.height &&
    ; rect1.y + rect1.height > rect2.y)) 
    
    ; condition 1
    ; calculate rect1.x < rect2.x + rect2.width
    push de
    ld a, e
    add a, $10
    ld e, a

    ld a, b
    cp e
    pop de
    jr nc, .continue

    ; condition 2
    ; calculate rect1.x + rect1.width > rect2.x
    push bc
    ld a, b
    add a, $10
    ld b, a

    ld a, b
    cp e
    pop bc
    jr c, .continue
    jr z, .continue

    ; condition 3
    ; calculate rect1.y < rect2.y + rect2.height
    push de
    ld a, d
    add a, $10
    ld d, a

    ld a, c
    cp d
    pop de
    jr nc, .continue

    ; condition 4
    ; calculate rect1.y + rect1.height > rect2.y
    push bc
    ld a, c
    add a, $10
    ld c, a

    ld a, d
    ;add a, $10
    ld d, a
    ld a, c
    cp d
    pop bc
    jr c, .continue
    jr z, .continue

.break:
    pop de
    
    ; Swap game Objects Based on Position
    call goc_adjust_z_index

    ld a, 1
    ret

.continue:
    pop de

    inc d
    ; check if all game objects have been checked
    ld a, 20
    cp d
    jr nz, .check_game_object

.finalize:
    ld a, 0
    ret

; Adjust two game objects z-index based on their Y-position
; d: target game object
goc_adjust_z_index:
    ; save d for later
    ld c, d

    ld a, d
    ; After calling goc_get_gameobject_address, hl holds the address to the target game object sprite
    call goc_get_gameobject_address
    
    ; Load Y position of target game object into e
    ld a, [hl]
    ld e, a

    ; load player game object
    ld a, [ram_player_character_id] 
    ; After calling goc_get_gameobject_address, hl holds the address to the target game object sprite
    call goc_get_gameobject_address

    ; Load Y position of player's game object into d
    ld a, [hl]
    ld d, a

    ; compare position to determine the game object position
    cp e
    ; player game objects is below the target game object
    jr c, .is_above
    ; in thise case the player game object must be above (z index lower)
    ld a, [ram_player_character_id]
    cp c
    
    ; if not carry (positive), then swap it. oterwise, return
    ret c
    ld a, [ram_player_character_id]
    ld b, a
    push bc
    push de
    push hl
    call goc_swap_gameobject_by_index
    pop hl
    pop de
    pop bc

    ; update player's id 
    ld a, c
    ld [ram_player_character_id], a
    ret

.is_above:
    ; in thise case the player game object must be above (z index lower)
    ld a, [ram_player_character_id]
    cp c
    
    ; if not carry (positive), then swap it. oterwise, return
    ret nc
    ld a, [ram_player_character_id]
    ld b, a
    push bc
    push de
    push hl
    call goc_swap_gameobject_by_index
    pop hl
    pop de
    pop bc

    ; update player's id 
    ld a, c
    ld [ram_player_character_id], a
    ret

    ret

; Swap two game objects by index
; c: game object index 1
; b: game object index 2
goc_swap_gameobject_by_index:
    
    ld a, c
    call goc_get_gameobject_address
    ld d, h
    ld e, l

    ld a, b
    call goc_get_gameobject_address

    ld b, $00
.continue_copy:
    ld a, [hl]
    ld [temp_gobj_y], a
    ld a, [de]
    ld [hl], a
    ld a, [temp_gobj_y]
    ld [de], a
    inc hl
    inc de
    inc b
    ld a, b
    cp $08
    jr nz, .continue_copy
    ret

; Adds offset to specific game object
; a: target game obhect
; c: 0 -> relative, 1 -> absolute
; d: X position/offset
; e: Y position/offset
goc_set_game_object_by_xy:

    ; After calling goc_get_gameobject_address, hl holds the address to the target game object sprite
    call goc_get_gameobject_address

    ld a, c
    cp $00
    jr nz, .absolute
        ld a, [hl]
        add e
        ld [hl], a
        inc hl
        ld a, [hl]
        add d
        ld [hl], a
        inc hl
        inc hl
        inc hl
        ld a, [hl]
        add e
        ld [hl], a
        inc hl
        ld a, [hl]
        add d
        ld [hl], a
        ret
.absolute:
    ld a, e
    ld [hl], a
    inc hl
    ld a, d
    ld [hl], a
    inc hl
    inc hl
    inc hl
    ld a, e
    ld [hl], a
    inc hl
    ld a, d
    add $08
    ld [hl], a
    ret