; 16 bit division
; DE = DE / BC, BC = remainder


_MD16temp    equ  division_temp
_MD16count   equ  division_temp + 2

        

div_DE_BC_DEBCu:
        ; initialize memory locations
        ld      hl,_MD16temp
        ld      [hl], $00
        inc     hl
        ld      [hl], $00 
        inc     hl
        ld      [hl], $00 

        ld      hl,_MD16temp
        ld      [hl],c
        inc     hl
        ld      [hl],b
        inc     hl
        ld      [hl],17
        ld      bc,0
.nxtbit:
        ld      hl,_MD16count
        ld      a,e
        rla
        ld      e,a
        ld      a,d
        rla
        ld      d,a
        dec     [hl]
        ret     z
        ld      a,c
        rla
        ld      c,a
        ld      a,b
        rla
        ld      b,a
        dec     hl
        dec     hl
        ld      a,c
        sub     [hl]
        ld      c,a
        inc     hl
        ld      a,b
        sbc     a,[hl]
        ld      b,a
        jr      nc,.noadd

        dec     hl
        ld      a,c
        add     a,[hl]
        ld      c,a
        inc     hl
        ld      a,b
        adc     a,[hl]
        ld      b,a
.noadd:
        ccf
        jr      .nxtbit
        

;*
;* 16/16/32 Bit Unsigned Math, Version A
;*
;* Initials: JF = Jeff Frohwein
;*
;* V1.0 - 15-Jul-97 : Original Release - JF
;* V1.1 - 27-Jul-97 : Modified for new subroutine prefixes - JF
;*

; If all of these are already defined, don't do it again.

        IF      !DEF(U161632A_ASM)
U161632A_ASM  SET  1

rev_Check_u161632a_asm: MACRO
;NOTE: REVISION NUMBER CHANGES MUST BE ADDED
;TO SECOND PARAMETER IN FOLLOWING LINE.
        IF      \1 > 1.1      ; <--- PUT REVISION NUMBER HERE
        WARN    "Version \1 or later of 'u161632a.asm' is required."
        ENDC
        ENDM

;*
;*  QMUL  -  Quick 16 x 16 Unsigned Multiply
;*
;*
;*         By:           Jon Tara
;*                       MicroControl Software
;*                       1300 E. Lafayette #2808
;*                       Detroit, Michigan  48207
;*                       (313) 393-2916
;*
;*        This software is placed in the public domain.
;*
;*
;*  On entry:  DE = Multiplicand
;*             HL = Multiplier
;*
;*  On exit:   BCDE = Product
;*
;*  AF destroyed
;*
;*  Revision 1.00  01/21/82   JT  Initial Release
;*  Revision 1.10  25/Apr/97  Bug fixes - Jeff Frohwein
;*

mul_DE_HL_BCDEu::
        push    hl              ; Save multiplier.
        ld      c,h             ; Save MSBs of multiplier.
        ld      a,l             ; LSBs to A for an 8 x 16 multiply.

        ld      b,0             ; Handy 0 to B for carry propagation.
        ld      h,b             ; Init LSBs of product.
        ld      l,b

        add     a,a             ; Test multiplier bit.
        jr      nc,.mul2
        add     hl,de           ; Add multiplicand to product.
        adc     a,b             ; (Product in AHL)
.mul2   add     hl,hl           ; Shift product left.
        adc     a,a             ; Test multiplier bit.
        jr      nc,.mul3
        add     hl,de           ; Add multiplicand to product.
        adc     a,b             ; (Product in AHL)
.mul3   add     hl,hl           ; Shift product left.
        adc     a,a             ; Test multiplier bit.
        jr      nc,.mul4
        add     hl,de           ; Add multiplicand to product.
        adc     a,b             ; (Product in AHL)
.mul4   add     hl,hl           ; Shift product left.
        adc     a,a             ; Test multiplier bit.
        jr      nc,.mul5
        add     hl,de           ; Add multiplicand to product.
        adc     a,b             ; (Product in AHL)
.mul5   add     hl,hl           ; Shift product left.
        adc     a,a             ; Test multiplier bit.
        jr      nc,.mul6
        add     hl,de           ; Add multiplicand to product.
        adc     a,b             ; (Product in AHL)
.mul6   add     hl,hl           ; Shift product left.
        adc     a,a             ; Test multiplier bit.
        jr      nc,.mul7
        add     hl,de           ; Add multiplicand to product.
        adc     a,b             ; (Product in AHL)
.mul7   add     hl,hl           ; Shift product left.
        adc     a,a             ; Test multiplier bit.
        jr      nc,.mul8
        add     hl,de           ; Add multiplicand to product.
        adc     a,b             ; (Product in AHL)
.mul8   add     hl,hl           ; Shift product left.
        adc     a,a             ; Test multiplier bit.
        jr      nc,.mul9
        add     hl,de           ; Add multiplicand to product.
        adc     a,b             ; (Product in AHL)

.mul9   push    hl              ; Save LSBs in stack.
        ld      h,b             ; Zero second product.
        ld      l,b             ; .
        ld      b,a             ; Save MSBs of first product in B
        ld      a,c             ; Get MSBs of multiplier.
        ld      c,h             ; Handy 0 in C this time.

        add     a,a             ; Test multiplier bit.
        jr      nc,.mul20
        add     hl,de           ; Add multiplicand to product.
        adc     a,c             ; (Product in AHL)
.mul20  add     hl,hl           ; Shift product left.
        adc     a,a             ; Test multiplier bit.
        jr      nc,.mul21
        add     hl,de           ; Add multiplicand to product.
        adc     a,c             ; (Product in AHL)
.mul21  add     hl,hl           ; Shift product left.
        adc     a,a             ; Test multiplier bit.
        jr      nc,.mul22
        add     hl,de           ; Add multiplicand to product.
        adc     a,c             ; (Product in AHL)
.mul22  add     hl,hl           ; Shift product left.
        adc     a,a             ; Test multiplier bit.
        jr      nc,.mul23
        add     hl,de           ; Add multiplicand to product.
        adc     a,c             ; (Product in AHL)
.mul23  add     hl,hl           ; Shift product left.
        adc     a,a             ; Test multiplier bit.
        jr      nc,.mul24
        add     hl,de           ; Add multiplicand to product.
        adc     a,c             ; (Product in AHL)
.mul24  add     hl,hl           ; Shift product left.
        adc     a,a             ; Test multiplier bit.
        jr      nc,.mul25
        add     hl,de           ; Add multiplicand to product.
        adc     a,c             ; (Product in AHL)
.mul25  add     hl,hl           ; Shift product left.
        adc     a,a             ; Test multiplier bit.
        jr      nc,.mul26
        add     hl,de           ; Add multiplicand to product.
        adc     a,c             ; (Product in AHL)
.mul26  add     hl,hl           ; Shift product left.
        adc     a,a             ; Test multiplier bit.
        jr      nc,.mul27
        add     hl,de           ; Add multiplicand to product.
        adc     a,c             ; (Product in AHL)

.mul27  pop     de              ; Fetch LSBs of 1st product.
        ld      c,a             ; Add partial products.
        ld      a,d             ; .
        add     a,l             ; .
        ld      d,a             ; .
        ld      a,b             ; .
        adc     a,h             ; .
        ld      h,a             ; .
        ld      a,c             ; .
        adc     a,0             ; .
        ld      b,a             ; .
        ld      c,h             ; .
        pop     hl              ; Restore multiplier.
        ret

        ENDC    ;u161632a_asm

MULTAB:	DB	0, 0, 1, 2, 4, 6, 9, 12, 16, 20
	DB	25, 30, 36, 42, 49, 56, 64, 72, 81, 90
	DB	100, 110, 121, 132, 144, 156, 169, 182, 196, 210
	DB	225, 240, 0, 16, 33, 50, 68, 86, 105, 124
	DB	144, 164, 185, 206, 228, 250, 17, 40, 64, 88
	DB	113, 138, 164, 190, 217, 244, 16, 44, 73, 102
	DB	132, 162, 193, 224, 0, 32, 65, 98, 132, 166
	DB	201, 236, 16, 52, 89, 126, 164, 202, 241, 24
	DB	64, 104, 145, 186, 228, 14, 57, 100, 144, 188
	DB	233, 22, 68, 114, 161, 208, 0, 48, 97, 146
	DB	196, 246, 41, 92, 144, 196, 249, 46, 100, 154
	DB	209, 8, 64, 120, 177, 234, 36, 94, 153, 212
	DB	16, 76, 137, 198, 4, 66, 129, 192

	DB	0, 192, 129, 66, 4, 198, 137, 76, 16, 212
	DB	153, 94, 36, 234, 177, 120, 64, 8, 209, 154
	DB	100, 46, 249, 196, 144, 92, 41, 246, 196, 146
	DB	97, 48, 0, 208, 161, 114, 68, 22, 233, 188
	DB	144, 100, 57, 14, 228, 186, 145, 104, 64, 24
	DB	241, 202, 164, 126, 89, 52, 16, 236, 201, 166
	DB	132, 98, 65, 32, 0, 224, 193, 162, 132, 102
	DB	73, 44, 16, 244, 217, 190, 164, 138, 113, 88
	DB	64, 40, 17, 250, 228, 206, 185, 164, 144, 124
	DB	105, 86, 68, 50, 33, 16, 0, 240, 225, 210
	DB	196, 182, 169, 156, 144, 132, 121, 110, 100, 90
	DB	81, 72, 64, 56, 49, 42, 36, 30, 25, 20
	DB	16, 12, 9, 6, 4, 2, 1, 0

	DB	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	DB	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	DB	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	DB	0, 0, 1, 1, 1, 1, 1, 1, 1, 1
	DB	1, 1, 1, 1, 1, 1, 2, 2, 2, 2
	DB	2, 2, 2, 2, 2, 2, 3, 3, 3, 3
	DB	3, 3, 3, 3, 4, 4, 4, 4, 4, 4
	DB	4, 4, 5, 5, 5, 5, 5, 5, 5, 6
	DB	6, 6, 6, 6, 6, 7, 7, 7, 7, 7
	DB	7, 8, 8, 8, 8, 8, 9, 9, 9, 9
	DB	9, 9, 10, 10, 10, 10, 10, 11, 11, 11
	DB	11, 12, 12, 12, 12, 12, 13, 13, 13, 13
	DB	14, 14, 14, 14, 15, 15, 15, 15

	DB	16, 15, 15, 15, 15, 14, 14, 14, 14, 13
	DB	13, 13, 13, 12, 12, 12, 12, 12, 11, 11
	DB	11, 11, 10, 10, 10, 10, 10, 9, 9, 9
	DB	9, 9, 9, 8, 8, 8, 8, 8, 7, 7
	DB	7, 7, 7, 7, 6, 6, 6, 6, 6, 6
	DB	5, 5, 5, 5, 5, 5, 5, 4, 4, 4
	DB	4, 4, 4, 4, 4, 3, 3, 3, 3, 3
	DB	3, 3, 3, 2, 2, 2, 2, 2, 2, 2
	DB	2, 2, 2, 1, 1, 1, 1, 1, 1, 1
	DB	1, 1, 1, 1, 1, 1, 1, 0, 0, 0
	DB	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	DB	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	DB	0, 0, 0, 0, 0, 0, 0, 0


; IN : A and D are to be multiplied
; OUT: HL is result
; CHANGES : AF,BC,E,HL
;
multiply_8_bits:
	LD	E,A
	SUB	D
	LD	H,MULTAB/256
	LD	L,A
	LD	C,[HL]
	INC	H
	LD	B,[HL]
	LD	A,E
	ADD	A,D
	LD	L,A
	LD	E,[HL]
	DEC	H
	LD	L,[HL]
	LD	H,E
	OR	A
        ld a, l
        sub c
        ld l, a
        ld a, h
        sbc b
        ld h, a
        ret