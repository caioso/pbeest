; Project Beest
; Background Control Routines
; Developed by Caio Souza Oliveira
; 7 Aug 2019

; initialize Background 
export bgc_initialize_background

bgc_initialize_background:
    ; set background scrolling to (0,0)
    ld a, 0
    ld [rSCX], a
    ld [rSCY], a
    
    ; clear screen
    call clear_lcd
    ret

; loads background palettes
; hl: holds address to first byte palette
; de: number of bytes to be loaded
; bc: holds palette index
bgc_load_background_palette:
    ld a, c
    ; multiplies index by 8, to target individual palettes by index, rather than colors.
    rla
    rla
    rla
    ld c, a
    ; set palette write mode (rBCPS)
    ; setting the MSBit of BCPS will increment allow writing to the palette registers with auto increment
    ; that after writing to BCPD, the lower 7 bits of BCPDS will be incremented
    ld a, $80
    or a, c
    ld [rBCPS], a
.load_palette_bytes:
    ld a, [hl]
    ld [rBCPD], a
    inc hl
    dec de
    ld a, e
    or d
    jr nz, .load_palette_bytes
    ret

; clear_lcd function
; args: no arguments
; return: no return
clear_lcd:
    ld a, [rLCDC]
    rlca
    ret nc

.wait_vblank
        ld a, [rLY]
        cp 145
        jr nz, .wait_vblank
        ld a,[rLCDC]
        res 7, a
        ld [rLCDC],a 
        ret 

; load background tiles
; hl: tile map initial address
; bc: tiles map offset
; d: map width
; e: map height
; a: VBK bank
bgc_load_background_tiles:
    ; set VBK bank
    ld [rVBK], a

    ; TODO: initial position to be loaded (X,Y). for now, starting at (0,0)
    push hl
    push bc
    push de
    ld e, b
    ld d, c
    ld bc, $10 ; (divide by 16)
    ; perform division division
    call div_DE_BC_DEBCu

    ; store tile offset (only the lowest byte is needed, since the maximum number of tiles per bank is 7F)
    ld hl, ram_general_use_variable_1
    ld [hl], e
    pop de
    pop bc
    pop hl

    ld bc, _SCRN0

     ; width counter (decremented for each byte loaded)
     push hl
     ld hl, ram_general_use_variable_2
     ld [hl], d
     pop hl
.copy_bytes
    ld a, [hl]

    ; apply offset to the loaded tile ID
    push hl
    push de
    ld e, a
    ld hl, ram_general_use_variable_1
    ld a, [hl]
    add a, e
    pop de
    pop hl

    ld [bc], a
    inc hl
    inc bc
    dec d
    ld a, d
    or $00
    jr z, .skip_rest_of_the_line
        jr .copy_bytes
.skip_rest_of_the_line:
    ;pop hl

    ; restore column counter
    push hl
    ld hl, ram_general_use_variable_2
    ld d, [hl]
    pop hl

    ; skip rest of the line
    push de
    ld a, 32
    sub d
    add a, c
    ld c, a
    ld a, b
    adc $00
    ld b, a
    pop de

    ; check whether outer loop is complete
    dec e
    ld a, e
    or $00
    jr nz, .copy_bytes

    ret