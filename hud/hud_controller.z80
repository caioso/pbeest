; Project Beest
; HUD Control Routines
; Developed by Caio Souza Oliveira
; 8 Aug 2019

; constants or labels
text_buffer_size equ 68
text_line_1_begin equ _SCRN1 + 32 + 1
text_line_2_begin equ _SCRN1 + 32*3 + 1
text_line_1_size equ 18
text_line_2_size equ 16
text_cursor_position equ text_line_2_begin + text_line_2_size + 1
arrow_blinking_delay equ $0800
arrow_character equ $55
blank_character equ $54
blank_character_code equ $FF
end_of_text_character_code equ $FE

; global variables
text_buffer equ _RAM + 1 ;C001
text_line equ text_buffer + text_buffer_size
text_box_state equ text_line + 1
text_box_key_state equ text_box_state + 1
text_current_char equ text_box_key_state + 1
text_current_line_char equ text_current_char + 1
text_remaining_chars equ text_current_line_char + 1

; include textbox map
include "hud/text_box.z80"

hud_initialize_hud:
    ; initialize hud tiles
    ld hl, hud_tiles
    ld bc, hud_tiles_end - hud_tiles
    ld de, _VRAM

    ; copy hud tiles
.copy_hud:
    ld a, [hl]
    ld [de], a
    inc hl
    inc de
    dec bc
    ld a, c
    or b
    jr nz, .copy_hud

    ; copy text box map
    ; Video Bank 1 (window/bg tiles)
    ld a, 0
    ld [rVBK], a

    ld bc, _SCRN1
    ld hl, text_box_map
    ld de, 0
    push de
.copy_text_box_map:
    ld a, [hl]
    ld [bc], a
    inc hl
    inc bc

    ; check whether 20 columns have been reached
    pop de
    inc de
    ld a, 20
    sub a, e
    jr nz, .continue_copy
        ld a, c
        add a, 12
        ld c, a
        ld a, b
        adc a, 0
        ld b, a
        ld de, 0
.continue_copy:
    push de
    ld de, text_box_map_end
    ld a, e
    sub a, l
    ld e, a
    ld a, d
    sbc a, h
    ld d, a
    or e
    jr nz, .copy_text_box_map

    ; copy set box map attributes
    ; Video Bank 1 (window/bg tiles)
    ld a, 1
    ld [rVBK], a

    ld bc, _SCRN1
    ; number of tiles

    ld de, text_box_map_end - text_box_map
    ld hl, 0

    ; TEMPORARY
.copy_text_box_map_attribute:
    ; load pallete #1
    ld a, 1
    ld [bc], a
    inc bc
    dec de
    inc hl

        ; check whether 20 columns have been reached
        ld a, 20
        sub l
        jr nz, .continue_attribute_copy
            ld a, c
            add a, 12
            ld c, a
            ld a, b
            adc a, 0
            ld b, a
            ld hl, 0

.continue_attribute_copy:
    ld a, e
    or d
    jr nz, .copy_text_box_map_attribute
    ret

; Shows text stored in the address held by text_buffer, with size of de
; This function assumes that the window tiles have already their attributes are set correctly (only the tiles will be updated)
; de: text size
; return: no return
hud_show_text:
    ; save previous hl
    push hl

    ; save de (function argument), to be used in step 2
    ; the last character must not be counted (MUST ALWAYS BE $FE)
    dec e
    ld a, e
    ld [text_remaining_chars], a

    ; clear window text before starting
    call hud_clear_text

    ; position the window on the screen bottom (for the animation)
    ld h, 7
    ld l, 8*18
    call wnd_set_window_position

    ; initialize current text box state
    ld a, $00
    ld [text_box_state], a
    ld [text_current_line_char], a

    ; initialize text counter 
    push hl
    ld hl, text_current_char
    ld a, $00
    ld [hl], a
    pop hl

.check_current_state:
    ; check current state
    ld a, [text_box_state]
    cp $00
    jr z, .run_text_box_state_1
    cp $01
    jr z, .run_text_box_state_2
    cp $02
    jp z, .run_text_box_state_3
    cp $03
    jp z, .run_text_box_state_4
    cp $04
    jp z, .run_text_box_state_5
    cp $05
    jp z, .run_text_box_state_6

; STATE MACHINE STATE 1: MOVE WINDOW UP
.run_text_box_state_1:
    ; initialize current position
    ld e, 8*18
    ld d, 7
.move_window:
    push de
    ld l, e
    ld h, d
    call wnd_set_window_position
    pop de
    dec de
    push de
    ; delay settings
    ; $FF -> outer loop control (255 times)
    ; $02 -> inner loop contorl (2 times)
    ld hl, $FF02
    call time_controlled_two_step_delay
    pop de
    ld a, 8*13
    cp e
    jr nz, .move_window
        ; Move up animation is complete, to the next state (text rendering)
        ld a, [text_box_state]
        inc a
        ld [text_box_state], a
        jp .check_current_state

; STATE MACHINE STATE 2: RENDER TEXT (WITH ANIMATION)
.run_text_box_state_2:
    ; Video Bank 1 (window/bg tiles)
    ld a, $00
    ld [rVBK], a

    ; initialize line controller
    ld hl, text_line
    ld a, 0
    ld [hl], a
    ld hl, text_line_1_begin

    ; restore current char
    push hl
    ld hl, text_current_char
    ld a, [hl]
    ld c, a
    ld b, $00
    pop hl

    ld a, 0
    push de
.load_text_bytes:
    ; saves current value of hl for (used as argument for is_key_down)
    push hl

    ; read input
    call joypad

    ; check whether if key is down
    ld l, key_a
    call  is_key_down
    jr z, .clear_key_down_flag
        ld a, $01
        ld [text_box_key_state], a
        jr .continue_text_rendering
.clear_key_down_flag;
        ld a, $00
        ld [text_box_key_state], a

.continue_text_rendering:
    ; restores hl
    pop hl
    
    ; call delay based on current user key press
    push hl
    ld a, [text_box_key_state]
    cp 0
    jr z, .long_delay
        ; $FF -> outer loop control (255 times)
        ; $01 -> inner loop contorl (1 time)
        ld hl, $FF05
        jr .call_adjusted_delay

.long_delay:
    ; $FF -> outer loop control (255 times)
    ; $40 -> inner loop contorl (32 times)
    ld hl, $FF40

.call_adjusted_delay:
    call time_controlled_two_step_delay 
    pop hl

    ; wait for vline interrupt
    call display_wait_vblank

    ; check if line must be broken
    push bc
    ld a, [text_current_char]
    ld c, a
    ld b, $00
    ld a, c
    add a, $01
    ld c, a
    ld a, b
    adc a, $C0
    ld b, a
    call hud_check_word_break
    pop bc

    cp $01
    jr z, .break_line

    ; increment current line counter
    ld a, [text_current_line_char]
    inc a
    ld [text_current_line_char], a

    ; add text_buffer address offset to bc
    ld a, [text_current_char]
    ld c, a
    ld b, $00
    push bc
    ld a, c
    add a, $01
    ld c, a
    ld a, b
    adc a, $C0
    ld b, a

    ; if first char in the line, skip all spaces (it has already been incremented above)
    ld a, [text_current_line_char]
    cp $01
    jr nz, .skip_entire_blank_first_char_checking
    ld e, c
    ld d, b
    ; get real value of bc (current char, without the address offset $C001)
    pop bc
.skip_char_until_it_is_not_first_line
    ld a, [de]
    cp $FF
    jr nz, .break_first_space_checking_loop
    inc de
    inc bc
    ; decrement text size (overal remaining characters to be rendered)
    ld a, [text_remaining_chars]
    dec a
    ld [text_remaining_chars], a
    jr .skip_char_until_it_is_not_first_line

.break_first_space_checking_loop:
    ; save bc back to stack
    push bc
    ld c, e
    ld b, d

    ; no registers must be restored if the loop has not been executed
.skip_entire_blank_first_char_checking:
    ld a, [bc]
    cp a, $FF
    jr z, .skip_char
    cp a, $FE
    jr z, .go_to_arrow_blinking
        ld [hl], a

; space detected
.skip_char:
    pop bc
    inc bc
    inc hl
    ld a, [text_remaining_chars]
    dec a
    ld [text_remaining_chars], a

.continue_char_skip:
    ; check whether the current line is finished
    ld a, c
    ld [text_current_char], a
    ld a, [text_line]
    cp $00
    jr nz, .line_2_check
        ld bc, text_line_1_size + text_line_1_begin
        jr .check_if_line_is_full
.line_2_check:
        ld bc, text_line_2_size + text_line_2_begin - 1
.check_if_line_is_full:
    ld a, c
    sub a, l
    ld c, a
    ld a, b
    sbc a, h
    ld b, a
    or c
    jr nz, .continue_in_the_same_line
    jr .normal_line_check

.break_line:   
.normal_line_check:
        ; clear line counter
        ld a, $00
        ld [text_current_line_char], a

        ; if already in line 2, change state and wait for user input (text should coninue in the next page)
        ld a, [text_line]
        cp $00
        jr nz, .should_continue_in_next_page
            ld a, [text_line]
            inc a
            ld [text_line], a
            ld hl, text_line_2_begin
            jr .continue_in_the_same_line
.should_continue_in_next_page
            ; clear current text line
            ld a, $00
            ld [text_line], a
            jr .go_to_arrow_blinking
        
.continue_in_the_same_line:
    ld a, d
    or e
    jp nz, .load_text_bytes

.go_to_arrow_blinking:
        ; Finished Rendering current page. Change current state
        ld a, [text_box_state]
        inc a
        ld [text_box_state], a

        ; Arrow blink delay
        ld bc, arrow_blinking_delay
        
        jp .check_current_state

; STATE MACHINE STATE 3: BLINK CURSOR
.run_text_box_state_3:
    ld a, b
    or c
    jr nz, .arrow_delay
        ; reset bc (set as arrow blink delay)
        ld bc, arrow_blinking_delay

        ; wait for vline interrupt
        call display_wait_vblank

        ; check whether the arrow is on screen
        ld a, [text_cursor_position]
        ; check if it is an empty tile (same as the 'space' tile)
        cp blank_character
        jr z, .show_arrow

        ; hide arrow
        ld a, blank_character
        ld [text_cursor_position], a
        jr .arrow_delay

.show_arrow:
        ; show arrow
        ld a, arrow_character
        ld [text_cursor_position], a

.arrow_delay:
    dec bc
    jr .read_joypad

.read_joypad:
    ; check previous key_state
    ld a, [text_box_key_state]
    cp $01
    jr z, .previous_state_key_pressed

    ; read input
    call joypad
    ld l, key_a
    call is_key_down
    jr z, .end_key_check
    jr .key_press_detected

.previous_state_key_pressed:
    call joypad
    ld l, key_a
    call is_key_down
    jr nz, .end_key_check
    jr .clear_previous_key

.clear_previous_key:
    ld a, $00
    ld [text_box_key_state], a
    jr .end_key_check

.key_press_detected: 
    ; Finished Rendering current page. Change current state
    ld a, [text_box_state]
    inc a
    ld [text_box_state], a
    jp .check_current_state

.end_key_check:
    jr .run_text_box_state_3

; STATE MACHINE STATE 4: CHECK FOR NEXT TEXT
.run_text_box_state_4:
    ; Finished Rendering current page. Check whether is ther still text to be rendered
    ld a, [text_remaining_chars]
    cp $00
    jr z, .hide_window
        ; return to state 2
        ld a, $01
        ld [text_box_state], a
        call hud_clear_text
        jp .check_current_state
.hide_window:
    ; go to state 5 otherwise
    ld a, [text_box_state]
    inc a
    ld [text_box_state], a
    jp .check_current_state

; STATE MACHINE STATE 5: CHECK FOR NEXT TEXT
.run_text_box_state_5:
    ld e, 8*13
    ld d, 7
.move_window_down:
    push de
    ld l, e
    ld h, d
    call wnd_set_window_position
    pop de
    inc de
    push de
    ; delay settings
    ; $FF -> outer loop control (255 times)
    ; $02 -> inner loop contorl (2 times)
    ld hl, $FF02
    call time_controlled_two_step_delay
    pop de
    ld a, 8*18+ 1
    cp e
    jr nz, .move_window_down
        ; Move up animation is complete, to the next state (text rendering)
        ld a, [text_box_state]
        inc a
        ld [text_box_state], a
        jp .check_current_state

.run_text_box_state_6:
    pop hl
    jr .leave_text_box_loop

.leave_text_box_loop:
    ret

; copy text constant to text buffer
; hl: text constant address
; de: text size
hud_copy_text_buffer:
    ld bc, text_buffer
    push de
.text_copy:
    ld a, [hl]
    ld [bc], a
    inc hl
    inc bc
    pop de
    dec de
    push de
    ld a, d
    or e
    jr nz, .text_copy
    ret

; clears both text lines in the window
hud_clear_text:
    push hl
    push de

    ; ensures that tile RAM bank is selected
    ld a, 0
    ld [rVBK], a
    
    ; initia line
    ld de, 0

    ; outer loop
.outer_loop:
    ; Wait for vblank interrupt
    call display_wait_vblank

    ; d holds the current character in the line
    ld d, 0
    ld a, 0
    or e
    jr nz, .clear_line_2
        ld hl, text_line_1_begin
        jr .inner_loop

.clear_line_2:
    ld hl, text_line_2_begin

.inner_loop:

    ; Clear the current line
    ld a, blank_character
    ld [hl], a
    inc hl
    inc d
    ; use line 1 length because all characters of line 1 and 2 must be erased (including the arrow)
    ld a, text_line_1_size
    cp d
    jr z, .finish_inner_loop
    jr .inner_loop

.finish_inner_loop:
    inc e
    ld a, 2
    cp e
    jr nz, .outer_loop

    ; restore the saved registers
    pop de
    pop hl

    ret

; bc: current char of the string
; return a: must go to next line/page
hud_check_word_break:
    ; current char is an space. return false
    ld a, [bc]
    cp $FF
    ld a, $00
    jr nz, .intialize_loop
    cp $FE
    ld a, $00
    jr nz, .intialize_loop
    ret

.intialize_loop:
    ; load current char
    ld a, [text_current_line_char]
    ld e, a
.continue_processing:
    ld a, [bc]
    inc bc
    inc e
    cp $FF
    jr nz, .check_second_value
    jr .check_meet
.check_second_value:
    cp $FE
    jr z, .check_meet
    jr .continue_processing

.check_meet:
    ; check if line counter has been exceeded
    ld a, [text_line]
    cp $00
    jr .limit_18
        ld a, 16
        sub e
        jr c, .exceeded
        jr .not_exceeded

.limit_18:
        ld a, 18
        sub e
        jr c, .exceeded
        jr .not_exceeded

.exceeded:
    ld a, $01
    ret

.not_exceeded:
    ld a, $00
    ret
