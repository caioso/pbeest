; Project Beest
; HUD Control Routines
; Developed by Caio Souza Oliveira
; 8 Aug 2019

; constants or labels
text_buffer_size equ 36
text_line_1_begin equ _SCRN1 + 32 + 1
text_line_2_begin equ _SCRN1 + 32*3 + 1
text_line_1_size equ 18
text_line_2_size equ 16
text_cursor_position equ text_line_2_begin + text_line_2_size + 1

; global variables
text_buffer equ _RAM + 1
text_line equ text_buffer + text_buffer_size
text_box_state equ text_line + 1
text_box_key_state equ text_box_state + 1

; include textbox map
include "hud/text_box.z80"

hud_initialize_hud:
    ; initialize hud tiles
    ld hl, hud_tiles
    ld bc, hud_tiles_end - hud_tiles
    ld de, _VRAM

    ; copy hud tiles
.copy_hud:
    ld a, [hl]
    ld [de], a
    inc hl
    inc de
    dec bc
    ld a, c
    or b
    jr nz, .copy_hud

    ; copy text box map
    ; Video Bank 1 (window/bg tiles)
    ld a, 0
    ld [rVBK], a

    ld bc, _SCRN1
    ld hl, text_box_map
    ld de, 0
    push de
.copy_text_box_map:
    ld a, [hl]
    ld [bc], a
    inc hl
    inc bc

    ; check whether 20 columns have been reached
    pop de
    inc de
    ld a, 20
    sub a, e
    jr nz, .continue_copy
        ld a, c
        add a, 12
        ld c, a
        ld a, b
        adc a, 0
        ld b, a
        ld de, 0
.continue_copy:
    push de
    ld de, text_box_map_end
    ld a, e
    sub a, l
    ld e, a
    ld a, d
    sbc a, h
    ld d, a
    or e
    jr nz, .copy_text_box_map

    ; copy set box map attributes
    ; Video Bank 1 (window/bg tiles)
    ld a, 1
    ld [rVBK], a

    ld bc, _SCRN1
    ; number of tiles

    ld de, text_box_map_end - text_box_map
    ld hl, 0

    ; TEMPORARY
.copy_text_box_map_attribute:
    ; load pallete #1
    ld a, 1
    ld [bc], a
    inc bc
    dec de
    inc hl

        ; check whether 20 columns have been reached
        ld a, 20
        sub l
        jr nz, .continue_attribute_copy
            ld a, c
            add a, 12
            ld c, a
            ld a, b
            adc a, 0
            ld b, a
            ld hl, 0

.continue_attribute_copy:
    ld a, e
    or d
    jr nz, .copy_text_box_map_attribute
    ret

; Shows text stored in the address held by text_buffer, with size of de
; This function assumes that the window tiles have already their attributes are set correctly (only the tiles will be updated)
; de: text size
; return: no return
hud_show_text:
    ; save previous hl
    push hl

    ; save de (function argument), to be used in step 2
    push de

    ; clear window text before starting
    call hud_clear_text

    ; position the window on the screen bottom (for the animation)
    ld h, 7
    ld l, 8*18
    call wnd_set_window_position

    ; initialize current text box state
    ld a, $00
    ld [text_box_state], a

.check_current_state:
    ; check current state
    ld a, [text_box_state]
    cp $00
    jr z, .run_text_box_state_1
    cp $01
    jr z, .run_text_box_state_2
    cp $02
    jp z, .run_text_box_state_3
    cp $03
    jp z, .run_text_box_state_4

; STATE MACHINE STATE 1: MOVE WINDOW UP
.run_text_box_state_1:
    ; initialize current position
    ld e, 8*18
    ld d, 7
.move_window:
    push de
    ld l, e
    ld h, d
    call wnd_set_window_position
    pop de
    dec de
    push de
    ; delay settings
    ; $FF -> outer loop control (255 times)
    ; $02 -> inner loop contorl (2 times)
    ld hl, $FF02
    call time_controlled_two_step_delay
    pop de
    ld a, 8*13
    cp e
    jr nz, .move_window
        ; Move up animation is complete, to the next state (text rendering)
        ld a, [text_box_state]
        inc a
        ld [text_box_state], a
        jp .check_current_state

; STATE MACHINE STATE 2: RENDER TEXT (WITH ANIMATION)
.run_text_box_state_2:
    ; recover de received as function argument (text size)
    pop de

    ; Video Bank 1 (window/bg tiles)
    ld a, $00
    ld [rVBK], a

    ; initialize line controller
    ld hl, text_line
    ld a, 0
    ld [hl], a
    ld hl, text_line_1_begin
    ld bc, text_buffer
    ld a, 0
    push de
.load_text_bytes:
    ; saves current value of hl for (used as argument for is_key_down)
    push hl

    ; read input
    call joypad

    ; check whether if key is down
    ld l, key_a
    call  is_key_down
    jr z, .clear_key_down_flag
        ld a, $01
        ld [text_box_key_state], a
        jr .continue_text_rendering
.clear_key_down_flag;
        ld a, $00
        ld [text_box_key_state], a

.continue_text_rendering:
    ; restores hl
    pop hl
    
    ; call delay based on current user key press
    push hl
    ld a, [text_box_key_state]
    cp 0
    jr z, .long_delay
        ; $FF -> outer loop control (255 times)
        ; $01 -> inner loop contorl (1 time)
        ld hl, $FF05
        jr .call_adjusted_delay

.long_delay:
    ; $FF -> outer loop control (255 times)
    ; $40 -> inner loop contorl (32 times)
    ld hl, $FF40

.call_adjusted_delay:
    call time_controlled_two_step_delay 
    pop hl

    ; wait for vline interrupt
    call display_wait_vblank

    ld a, [bc]
    cp a, $FF
    jr z, .skip_char
        ld [hl], a
; space detected
.skip_char:
    inc bc
    inc hl

    ; check whether the current line is finished
    push bc
    ld a, [text_line]
    cp $00
    jr nz, .line_2_check
        ld bc, text_line_1_size + text_line_1_begin
        jr .check_if_line_is_full
.line_2_check:
        ld bc, text_line_2_size + text_line_2_begin
.check_if_line_is_full:
    ld a, c
    sub a, l
    ld c, a
    ld a, b
    sbc a, h
    ld b, a
    or c
    jr nz, .continue_in_the_same_line
        ld a, [text_line]
        inc a
        ld [text_line], a
        ld hl, text_line_2_begin
        
.continue_in_the_same_line:
    pop bc
    pop de
    dec de
    push de
    ld a, d
    or e
    jr nz, .load_text_bytes

        ; Finished Rendering current page. Change current state
        ld a, [text_box_state]
        inc a
        ld [text_box_state], a

        ; Arrow blink delay
        ld bc, $0600
        
        jp .check_current_state

; STATE MACHINE STATE 3: BLINK CURSOR
.run_text_box_state_3:
    ld a, b
    or c
    jr nz, .arrow_delay
        ; reset bc (set as arrow blink delay)
        ld bc, $0600

        ; wait for vline interrupt
        call display_wait_vblank

        ; check whether the arrow is on screen
        ld a, [text_cursor_position]
        ; check if it is an empty tile (same as the 'space' tile)
        cp $54
        jr z, .show_arrow

        ; hide arrow
        ld a, $54
        ld [text_cursor_position], a
        jr .arrow_delay

.show_arrow:
        ; show arrow
        ld a, $55
        ld [text_cursor_position], a

.arrow_delay:
    dec bc
    jr .read_joypad

.read_joypad:
    ; check previous key_state
    ld a, [text_box_key_state]
    cp $01
    jr z, .previous_state_key_pressed

    ; read input
    call joypad
    ld l, key_a
    call is_key_down
    jr z, .end_key_check
    jr .key_press_detected

.previous_state_key_pressed:
    call joypad
    ld l, key_a
    call is_key_down
    jr nz, .end_key_check
    jr .clear_previous_key

.clear_previous_key:
    ld a, $00
    ld [text_box_key_state], a
    jr .end_key_check

.key_press_detected: 
    ; Finished Rendering current page. Change current state
    ld a, [text_box_state]
    inc a
    ld [text_box_state], a
    jp .check_current_state

.end_key_check:
    jr .run_text_box_state_3

; STATE MACHINE STATE 4: CHECK FOR NEXT TEXT
.run_text_box_state_4:
    nop 
    jr .run_text_box_state_4

.leave_text_box_loop:
    ret

; copy text constant to text buffer
; hl: text constant address
; de: text size
hud_copy_text_buffer:
    ld bc, text_buffer
    push de
.text_copy:
    ld a, [hl]
    ld [bc], a
    inc hl
    inc bc
    pop de
    dec de
    push de
    ld a, d
    or e
    jr nz, .text_copy
    ret

; clears both text lines in the window
hud_clear_text:
    push hl
    push de

    ; ensures that tile RAM bank is selected
    ld a, 0
    ld [rVBK], a
    
    ; initia line
    ld de, 0

    ; outer loop
.outer_loop:
    ; Wait for vblank interrupt
    call display_wait_vblank

    ; d holds the current character in the line
    ld d, 0
    ld a, 0
    or e
    jr nz, .clear_line_2
        ld hl, text_line_1_begin
        jr .inner_loop

.clear_line_2:
    ld hl, text_line_2_begin

.inner_loop:

    ; Clear the current line
    ld a, $54
    ld [hl], a
    inc hl
    inc d
    ; use line 1 length because all characters of line 1 and 2 must be erased (including the arrow)
    ld a, text_line_1_size
    cp d
    jr z, .finish_inner_loop
    jr .inner_loop

.finish_inner_loop:
    inc e
    ld a, 2
    cp e
    jr nz, .outer_loop

    ; restore the saved registers
    pop de
    pop hl

    ret

